
Integration.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000082  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000a8a  2**0
                  ALLOC, LOAD, DATA
  2 .bss          00000054  00800060  00800060  00000a8a  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000a8a  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 000000ee  00000000  00000000  00000ab9  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001eda  00000000  00000000  00000ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f2  00000000  00000000  00002bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b15  00000000  00000000  000034b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  00003fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000235  00000000  00000000  00004230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005c3  00000000  00000000  00004465  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000002  00000974  00000974  00000a48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004b08  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.i2c_write 0000000e  000008b4  000008b4  00000988  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.i2c_start 0000000c  00000916  00000916  000009ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.i2c_stop 00000006  00000964  00000964  00000a38  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.i2c_init 0000000c  00000922  00000922  000009f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.i2c_read 00000018  00000888  00000888  0000095c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .rodata       0000002c  008000b4  0000097e  00000a52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .text.main    0000025c  00000094  00000094  00000168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.ADC_init 00000014  000008a0  000008a0  00000974  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.read_ADC1 00000024  000007e6  000007e6  000008ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.read_ADC2 00000024  0000080a  0000080a  000008de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.read_ADC1_reg 0000001c  00000850  00000850  00000924  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.read_ADC2_reg 0000001c  0000086c  0000086c  00000940  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.PWM_init 0000002c  000007ba  000007ba  0000088e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.CPE_relay_on 00000008  00000944  00000944  00000a18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.send_CPE_Enable 0000000e  000008c2  000008c2  00000996  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.USART_init 0000000e  000008d0  000008d0  000009a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.USART_Transmit 00000008  0000094c  0000094c  00000a20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.hex2ascii 0000003e  0000077c  0000077c  00000850  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .progmemx.data.asctab 00000011  00000082  00000082  00000156  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 34 .text.getM    000001a8  000002f0  000002f0  000003c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .data.Kd      00000004  008000e0  000009aa  00000a7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 36 .data.Ki      00000004  008000e4  000009ae  00000a82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 37 .data.Kp      00000004  008000e8  000009b2  00000a86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 38 .text         0000000a  0000093a  0000093a  00000a0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text         000000c2  0000055c  0000055c  00000630  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text         00000008  00000954  00000954  00000a28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text         00000058  00000698  00000698  0000076c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text         0000007a  0000061e  0000061e  000006f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text         00000048  000006f0  000006f0  000007c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text         0000000c  0000092e  0000092e  00000a02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text         00000006  0000096a  0000096a  00000a3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text         0000000e  000008de  000008de  000009b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text         0000000e  000008ec  000008ec  000009c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text         00000022  0000082e  0000082e  00000902  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text         00000044  00000738  00000738  0000080c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text         0000000e  000008fa  000008fa  000009ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text         00000008  0000095c  0000095c  00000a30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text         00000004  00000970  00000970  00000a44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text         000000c4  00000498  00000498  0000056c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.__dummy_fini 00000002  00000976  00000976  00000a4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.__dummy_funcs_on_exit 00000002  00000978  00000978  00000a4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.__dummy_simulator_exit 00000002  0000097a  0000097a  00000a4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.exit    0000000e  00000908  00000908  000009dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text._Exit   00000002  0000097c  0000097c  00000a50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	18 c0       	rjmp	.+48     	; 0x32 <__ctors_end>
   2:	b8 c4       	rjmp	.+2416   	; 0x974 <__bad_interrupt>
   4:	b7 c4       	rjmp	.+2414   	; 0x974 <__bad_interrupt>
   6:	b6 c4       	rjmp	.+2412   	; 0x974 <__bad_interrupt>
   8:	b5 c4       	rjmp	.+2410   	; 0x974 <__bad_interrupt>
   a:	b4 c4       	rjmp	.+2408   	; 0x974 <__bad_interrupt>
   c:	b3 c4       	rjmp	.+2406   	; 0x974 <__bad_interrupt>
   e:	b2 c4       	rjmp	.+2404   	; 0x974 <__bad_interrupt>
  10:	b1 c4       	rjmp	.+2402   	; 0x974 <__bad_interrupt>
  12:	b0 c4       	rjmp	.+2400   	; 0x974 <__bad_interrupt>
  14:	af c4       	rjmp	.+2398   	; 0x974 <__bad_interrupt>
  16:	ae c4       	rjmp	.+2396   	; 0x974 <__bad_interrupt>
  18:	ad c4       	rjmp	.+2394   	; 0x974 <__bad_interrupt>
  1a:	ac c4       	rjmp	.+2392   	; 0x974 <__bad_interrupt>
  1c:	ab c4       	rjmp	.+2390   	; 0x974 <__bad_interrupt>
  1e:	aa c4       	rjmp	.+2388   	; 0x974 <__bad_interrupt>
  20:	a9 c4       	rjmp	.+2386   	; 0x974 <__bad_interrupt>
  22:	a8 c4       	rjmp	.+2384   	; 0x974 <__bad_interrupt>
  24:	a7 c4       	rjmp	.+2382   	; 0x974 <__bad_interrupt>

00000026 <.dinit>:
  26:	00 60       	ori	r16, 0x00	; 0
  28:	00 b4       	in	r0, 0x20	; 32
  2a:	80 00       	.word	0x0080	; ????
  2c:	b4 00       	.word	0x00b4	; ????
  2e:	ec 00       	.word	0x00ec	; ????
  30:	09 7e       	andi	r16, 0xE9	; 233

00000032 <__ctors_end>:
  32:	11 24       	eor	r1, r1
  34:	1f be       	out	0x3f, r1	; 63
  36:	cf e5       	ldi	r28, 0x5F	; 95
  38:	d4 e0       	ldi	r29, 0x04	; 4
  3a:	de bf       	out	0x3e, r29	; 62
  3c:	cd bf       	out	0x3d, r28	; 61

0000003e <__do_copy_data>:
  3e:	e6 e2       	ldi	r30, 0x26	; 38
  40:	f0 e0       	ldi	r31, 0x00	; 0
  42:	40 e0       	ldi	r20, 0x00	; 0
  44:	17 c0       	rjmp	.+46     	; 0x74 <__do_clear_bss+0x8>
  46:	b5 91       	lpm	r27, Z+
  48:	a5 91       	lpm	r26, Z+
  4a:	35 91       	lpm	r19, Z+
  4c:	25 91       	lpm	r18, Z+
  4e:	05 91       	lpm	r16, Z+
  50:	07 fd       	sbrc	r16, 7
  52:	0c c0       	rjmp	.+24     	; 0x6c <__do_clear_bss>
  54:	95 91       	lpm	r25, Z+
  56:	85 91       	lpm	r24, Z+
  58:	ef 01       	movw	r28, r30
  5a:	f9 2f       	mov	r31, r25
  5c:	e8 2f       	mov	r30, r24
  5e:	05 90       	lpm	r0, Z+
  60:	0d 92       	st	X+, r0
  62:	a2 17       	cp	r26, r18
  64:	b3 07       	cpc	r27, r19
  66:	d9 f7       	brne	.-10     	; 0x5e <__SREG__+0x1f>
  68:	fe 01       	movw	r30, r28
  6a:	04 c0       	rjmp	.+8      	; 0x74 <__do_clear_bss+0x8>

0000006c <__do_clear_bss>:
  6c:	1d 92       	st	X+, r1
  6e:	a2 17       	cp	r26, r18
  70:	b3 07       	cpc	r27, r19
  72:	e1 f7       	brne	.-8      	; 0x6c <__do_clear_bss>
  74:	e2 33       	cpi	r30, 0x32	; 50
  76:	f4 07       	cpc	r31, r20
  78:	31 f7       	brne	.-52     	; 0x46 <__SREG__+0x7>
  7a:	0c d0       	rcall	.+24     	; 0x94 <main>
  7c:	45 c4       	rjmp	.+2186   	; 0x908 <exit>

0000007e <_exit>:
  7e:	f8 94       	cli

00000080 <__stop_program>:
  80:	ff cf       	rjmp	.-2      	; 0x80 <__stop_program>

Disassembly of section .text:

00000974 <__bad_interrupt>:
 974:	45 cb       	rjmp	.-2422   	; 0x0 <__vectors>

Disassembly of section .text.i2c_write:

000008b4 <i2c_write>:
#include "I2C.h"
#include <avr/io.h>

void i2c_write(unsigned char data)
{
  TWDR = data;
 8b4:	83 b9       	out	0x03, r24	; 3
  TWCR = (1<< TWINT)|(1<<TWEN);
 8b6:	84 e8       	ldi	r24, 0x84	; 132
 8b8:	86 bf       	out	0x36, r24	; 54
  while ((TWCR & (1 <<TWINT)) == 0);
 8ba:	06 b6       	in	r0, 0x36	; 54
 8bc:	07 fe       	sbrs	r0, 7
 8be:	fd cf       	rjmp	.-6      	; 0x8ba <i2c_write+0x6>
}
 8c0:	08 95       	ret

Disassembly of section .text.i2c_start:

00000916 <i2c_start>:

void i2c_start(void)
{
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 916:	84 ea       	ldi	r24, 0xA4	; 164
 918:	86 bf       	out	0x36, r24	; 54
  while ((TWCR & (1 << TWINT)) == 0);
 91a:	06 b6       	in	r0, 0x36	; 54
 91c:	07 fe       	sbrs	r0, 7
 91e:	fd cf       	rjmp	.-6      	; 0x91a <i2c_start+0x4>
}
 920:	08 95       	ret

Disassembly of section .text.i2c_stop:

00000964 <i2c_stop>:

void i2c_stop()
{
  TWCR = (1<< TWINT)|(1<<TWEN)|(1<<TWSTO);
 964:	84 e9       	ldi	r24, 0x94	; 148
 966:	86 bf       	out	0x36, r24	; 54
 968:	08 95       	ret

Disassembly of section .text.i2c_init:

00000922 <i2c_init>:
}

void i2c_init(void)
{
  TWSR=0x00;			
 922:	11 b8       	out	0x01, r1	; 1
  TWBR=0x47;   // check what value needs to be for 8 MHz crystal			
 924:	87 e4       	ldi	r24, 0x47	; 71
 926:	80 b9       	out	0x00, r24	; 0
  TWCR=0x04;			
 928:	84 e0       	ldi	r24, 0x04	; 4
 92a:	86 bf       	out	0x36, r24	; 54
 92c:	08 95       	ret

Disassembly of section .text.i2c_read:

00000888 <i2c_read>:
}

unsigned char i2c_read(unsigned char isLast)
{
  if (isLast == 0)		
 888:	81 11       	cpse	r24, r1
 88a:	03 c0       	rjmp	.+6      	; 0x892 <i2c_read+0xa>
    TWCR = (1<< TWINT)|(1<<TWEN)|(1<<TWEA);   // if want to read more than 1 byte
 88c:	84 ec       	ldi	r24, 0xC4	; 196
 88e:	86 bf       	out	0x36, r24	; 54
 890:	02 c0       	rjmp	.+4      	; 0x896 <i2c_read+0xe>
  else				
    TWCR = (1<< TWINT)|(1<<TWEN);   // if want to read only 1 byte
 892:	84 e8       	ldi	r24, 0x84	; 132
 894:	86 bf       	out	0x36, r24	; 54
  while ((TWCR & (1 <<TWINT)) == 0);
 896:	06 b6       	in	r0, 0x36	; 54
 898:	07 fe       	sbrs	r0, 7
 89a:	fd cf       	rjmp	.-6      	; 0x896 <i2c_read+0xe>
  return TWDR;
 89c:	83 b1       	in	r24, 0x03	; 3
 89e:	08 95       	ret

Disassembly of section .text.main:

00000094 <main>:
uint8_t buff[64];
uint8_t control = 0;

void blinkInit();

int main(void) {
  94:	bf 92       	push	r11
  96:	cf 92       	push	r12
  98:	df 92       	push	r13
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	ae 97       	sbiw	r28, 0x2e	; 46
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	f8 94       	cli
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	cd bf       	out	0x3d, r28	; 61
	
	DDRD &= ~(1 << PD6); // PD6 as input (SWITCH 4)
  b6:	81 b3       	in	r24, 0x11	; 17
  b8:	8f 7b       	andi	r24, 0xBF	; 191
  ba:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1 << PD7); // PD7 as input (SWITCH 5)
  bc:	81 b3       	in	r24, 0x11	; 17
  be:	8f 77       	andi	r24, 0x7F	; 127
  c0:	81 bb       	out	0x11, r24	; 17

	DDRD |= (1 << PD5); // PD5 as output
  c2:	81 b3       	in	r24, 0x11	; 17
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	81 bb       	out	0x11, r24	; 17
	// Check the values of PD6 and PD7 to determine the mode
	if (!(PIND & (1 << PD6)) && !(PIND & (1 << PD7))) {
  c8:	86 99       	sbic	0x10, 6	; 16
  ca:	58 c0       	rjmp	.+176    	; 0x17c <main+0xe8>
  cc:	87 99       	sbic	0x10, 7	; 16
  ce:	56 c0       	rjmp	.+172    	; 0x17c <main+0xe8>
		// Mode 00: Data Acquisition
		uint8_t curr_page = 0xFF;
		uint16_t curr_val = 1;
		//desired blink value for about .25s blink
		ADC_init();
  d0:	e7 d3       	rcall	.+1998   	; 0x8a0 <ADC_init>
		i2c_init();
  d2:	27 d4       	rcall	.+2126   	; 0x922 <i2c_init>
		send_CPE_Enable();				//enables ee board to function
  d4:	f6 d3       	rcall	.+2028   	; 0x8c2 <send_CPE_Enable>
	DDRD |= (1 << PD5); // PD5 as output
	// Check the values of PD6 and PD7 to determine the mode
	if (!(PIND & (1 << PD6)) && !(PIND & (1 << PD7))) {
		// Mode 00: Data Acquisition
		uint8_t curr_page = 0xFF;
		uint16_t curr_val = 1;
  d6:	cc 24       	eor	r12, r12
  d8:	c3 94       	inc	r12
  da:	d1 2c       	mov	r13, r1

	DDRD |= (1 << PD5); // PD5 as output
	// Check the values of PD6 and PD7 to determine the mode
	if (!(PIND & (1 << PD6)) && !(PIND & (1 << PD7))) {
		// Mode 00: Data Acquisition
		uint8_t curr_page = 0xFF;
  dc:	bb 24       	eor	r11, r11
  de:	ba 94       	dec	r11
		uint16_t curr_val = 1;
		//desired blink value for about .25s blink
		ADC_init();
		i2c_init();
		send_CPE_Enable();				//enables ee board to function
		while(--curr_page){
  e0:	37 c0       	rjmp	.+110    	; 0x150 <main+0xbc>
			if(!(!(PIND & (1 << PD6)) && !(PIND & (1 << PD7)))){break;}
  e2:	86 99       	sbic	0x10, 6	; 16
  e4:	38 c0       	rjmp	.+112    	; 0x156 <main+0xc2>
  e6:	87 99       	sbic	0x10, 7	; 16
  e8:	36 c0       	rjmp	.+108    	; 0x156 <main+0xc2>
  ea:	00 e0       	ldi	r16, 0x00	; 0
  ec:	10 e0       	ldi	r17, 0x00	; 0
  ee:	15 c0       	rjmp	.+42     	; 0x11a <main+0x86>
			for(int i = 0; i < 64; i++){
				buff[i] = read_ADC1_reg();			// measured
  f0:	af d3       	rcall	.+1886   	; 0x850 <read_ADC1_reg>
  f2:	98 01       	movw	r18, r16
  f4:	2c 59       	subi	r18, 0x9C	; 156
  f6:	3f 4f       	sbci	r19, 0xFF	; 255
  f8:	79 01       	movw	r14, r18
  fa:	f9 01       	movw	r30, r18
  fc:	80 83       	st	Z, r24
				buff[++i] = read_ADC2_reg();		// desired
  fe:	b6 d3       	rcall	.+1900   	; 0x86c <read_ADC2_reg>
 100:	f7 01       	movw	r30, r14
 102:	81 83       	std	Z+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	ff e7       	ldi	r31, 0x7F	; 127
 106:	28 e3       	ldi	r18, 0x38	; 56
 108:	31 e0       	ldi	r19, 0x01	; 1
 10a:	f1 50       	subi	r31, 0x01	; 1
 10c:	20 40       	sbci	r18, 0x00	; 0
 10e:	30 40       	sbci	r19, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x76>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x80>
 114:	00 00       	nop
		ADC_init();
		i2c_init();
		send_CPE_Enable();				//enables ee board to function
		while(--curr_page){
			if(!(!(PIND & (1 << PD6)) && !(PIND & (1 << PD7)))){break;}
			for(int i = 0; i < 64; i++){
 116:	0e 5f       	subi	r16, 0xFE	; 254
 118:	1f 4f       	sbci	r17, 0xFF	; 255
 11a:	00 34       	cpi	r16, 0x40	; 64
 11c:	11 05       	cpc	r17, r1
 11e:	44 f3       	brlt	.-48     	; 0xf0 <main+0x5c>
				buff[i] = read_ADC1_reg();			// measured
				buff[++i] = read_ADC2_reg();		// desired
				_delay_ms(50);
			}
			i2c_start();
 120:	fa d3       	rcall	.+2036   	; 0x916 <i2c_start>
			i2c_write(EEPROM1_WR);
 122:	82 ea       	ldi	r24, 0xA2	; 162
 124:	c7 d3       	rcall	.+1934   	; 0x8b4 <i2c_write>
			i2c_write((uint8_t)(curr_val >> 8)&0xFF);			//high byte memory address
 126:	8d 2d       	mov	r24, r13
 128:	c5 d3       	rcall	.+1930   	; 0x8b4 <i2c_write>
			i2c_write((uint8_t)(curr_val)&0xFF);			//low byte memory address
 12a:	8c 2d       	mov	r24, r12
 12c:	c3 d3       	rcall	.+1926   	; 0x8b4 <i2c_write>
			//write one page at a time
			for(int i = 0; i < 64; i++) {
 12e:	00 e0       	ldi	r16, 0x00	; 0
 130:	10 e0       	ldi	r17, 0x00	; 0
 132:	07 c0       	rjmp	.+14     	; 0x142 <main+0xae>
				i2c_write(buff[i]);
 134:	f8 01       	movw	r30, r16
 136:	ec 59       	subi	r30, 0x9C	; 156
 138:	ff 4f       	sbci	r31, 0xFF	; 255
 13a:	80 81       	ld	r24, Z
 13c:	bb d3       	rcall	.+1910   	; 0x8b4 <i2c_write>
			i2c_start();
			i2c_write(EEPROM1_WR);
			i2c_write((uint8_t)(curr_val >> 8)&0xFF);			//high byte memory address
			i2c_write((uint8_t)(curr_val)&0xFF);			//low byte memory address
			//write one page at a time
			for(int i = 0; i < 64; i++) {
 13e:	0f 5f       	subi	r16, 0xFF	; 255
 140:	1f 4f       	sbci	r17, 0xFF	; 255
 142:	00 34       	cpi	r16, 0x40	; 64
 144:	11 05       	cpc	r17, r1
 146:	b4 f3       	brlt	.-20     	; 0x134 <main+0xa0>
				i2c_write(buff[i]);
			}
			i2c_stop();
 148:	0d d4       	rcall	.+2074   	; 0x964 <i2c_stop>
			curr_val = curr_val+64;							//increment starting memory address each loop32*64
 14a:	80 e4       	ldi	r24, 0x40	; 64
 14c:	c8 0e       	add	r12, r24
 14e:	d1 1c       	adc	r13, r1
		uint16_t curr_val = 1;
		//desired blink value for about .25s blink
		ADC_init();
		i2c_init();
		send_CPE_Enable();				//enables ee board to function
		while(--curr_page){
 150:	ba 94       	dec	r11
 152:	b1 10       	cpse	r11, r1
 154:	c6 cf       	rjmp	.-116    	; 0xe2 <main+0x4e>
			}
			i2c_stop();
			curr_val = curr_val+64;							//increment starting memory address each loop32*64
		}
		//TIMSK &= ~0x01;
		PORTD ^= (1 << PD5);
 156:	92 b3       	in	r25, 0x12	; 18
 158:	80 e2       	ldi	r24, 0x20	; 32
 15a:	89 27       	eor	r24, r25
 15c:	82 bb       	out	0x12, r24	; 18
		i2c_start();
 15e:	db d3       	rcall	.+1974   	; 0x916 <i2c_start>
		i2c_write(EEPROM1_WR);
 160:	82 ea       	ldi	r24, 0xA2	; 162
 162:	a8 d3       	rcall	.+1872   	; 0x8b4 <i2c_write>
		i2c_write(0x00);			//high byte memory address
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	a6 d3       	rcall	.+1868   	; 0x8b4 <i2c_write>
		i2c_write(0x00);			//low byte memory address
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	a4 d3       	rcall	.+1864   	; 0x8b4 <i2c_write>
		i2c_write((0xFF-curr_page));
 16c:	8b 2d       	mov	r24, r11
 16e:	80 95       	com	r24
 170:	a1 d3       	rcall	.+1858   	; 0x8b4 <i2c_write>
		i2c_stop();
 172:	f8 d3       	rcall	.+2032   	; 0x964 <i2c_stop>
		PORTD |= (CPE_Enable);
 174:	82 b3       	in	r24, 0x12	; 18
 176:	80 62       	ori	r24, 0x20	; 32
 178:	82 bb       	out	0x12, r24	; 18
		return 0;
 17a:	a8 c0       	rjmp	.+336    	; 0x2cc <__EEPROM_REGION_LENGTH__+0xcc>
	}	
	else if (!(PIND & (1 << PD6)) && (PIND & (1 << PD7))) {
 17c:	86 99       	sbic	0x10, 6	; 16
 17e:	17 c0       	rjmp	.+46     	; 0x1ae <main+0x11a>
 180:	87 9b       	sbis	0x10, 7	; 16
 182:	15 c0       	rjmp	.+42     	; 0x1ae <main+0x11a>
		// Mode 01: Control
		// PC2 is desired value
		// PC1 is measured value
		//desired blink value for about .5s blink
		PWM_init();
 184:	1a d3       	rcall	.+1588   	; 0x7ba <PWM_init>
		ADC_init();
 186:	8c d3       	rcall	.+1816   	; 0x8a0 <ADC_init>
		CPE_relay_on();
 188:	dd d3       	rcall	.+1978   	; 0x944 <CPE_relay_on>
		send_CPE_Enable();
 18a:	9b d3       	rcall	.+1846   	; 0x8c2 <send_CPE_Enable>
		while(1){
			OCR1A = getM(read_ADC2(), read_ADC1());
 18c:	2c d3       	rcall	.+1624   	; 0x7e6 <read_ADC1>
 18e:	6b 01       	movw	r12, r22
 190:	7c 01       	movw	r14, r24
 192:	3b d3       	rcall	.+1654   	; 0x80a <read_ADC2>
 194:	a7 01       	movw	r20, r14
 196:	96 01       	movw	r18, r12
 198:	ab d0       	rcall	.+342    	; 0x2f0 <getM>
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	9b bd       	out	0x2b, r25	; 43
 19e:	8a bd       	out	0x2a, r24	; 42
 1a0:	ef e0       	ldi	r30, 0x0F	; 15
 1a2:	f7 e2       	ldi	r31, 0x27	; 39
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <main+0x110>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x116>
 1aa:	00 00       	nop
 1ac:	ef cf       	rjmp	.-34     	; 0x18c <main+0xf8>
			_delay_ms(5);
		}
	}
	//1-0
	else if ((PIND & (1 << PD6)) && !(PIND & (1 << PD7))) {
 1ae:	86 9b       	sbis	0x10, 6	; 16
 1b0:	8d c0       	rjmp	.+282    	; 0x2cc <__EEPROM_REGION_LENGTH__+0xcc>
 1b2:	87 99       	sbic	0x10, 7	; 16
 1b4:	8b c0       	rjmp	.+278    	; 0x2cc <__EEPROM_REGION_LENGTH__+0xcc>
		uint8_t num_pages;
		uint16_t curr_val = 1;
		// Mode 10: Idle
		UC data, C1, C2;
		char str[25] = {'\n','\r','S','e','n','d','i','n','g',' ','E','E','P','R','O','M',' ','v','a','l','u','e','s','\n','\r'};
 1b6:	89 e1       	ldi	r24, 0x19	; 25
 1b8:	e4 eb       	ldi	r30, 0xB4	; 180
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	de 01       	movw	r26, r28
 1be:	11 96       	adiw	r26, 0x01	; 1
 1c0:	01 90       	ld	r0, Z+
 1c2:	0d 92       	st	X+, r0
 1c4:	8a 95       	dec	r24
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <main+0x12c>
		UC p_str[19] = {'P','a','g','e','s',' ','t','o',' ','b','e',' ','r','e','a','d',' ','=', ' '};
 1c8:	83 e1       	ldi	r24, 0x13	; 19
 1ca:	ed ec       	ldi	r30, 0xCD	; 205
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	de 01       	movw	r26, r28
 1d0:	5a 96       	adiw	r26, 0x1a	; 26
 1d2:	01 90       	ld	r0, Z+
 1d4:	0d 92       	st	X+, r0
 1d6:	8a 95       	dec	r24
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <main+0x13e>
		USART_init(MyBaud);
 1da:	83 e3       	ldi	r24, 0x33	; 51
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	78 d3       	rcall	.+1776   	; 0x8d0 <USART_init>
		i2c_init();
 1e0:	a0 d3       	rcall	.+1856   	; 0x922 <i2c_init>
		for(uint8_t i = 0; i < 25; i++){
 1e2:	10 e0       	ldi	r17, 0x00	; 0
 1e4:	09 c0       	rjmp	.+18     	; 0x1f8 <main+0x164>
			USART_Transmit(str[i]);
 1e6:	e1 e0       	ldi	r30, 0x01	; 1
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	ec 0f       	add	r30, r28
 1ec:	fd 1f       	adc	r31, r29
 1ee:	e1 0f       	add	r30, r17
 1f0:	f1 1d       	adc	r31, r1
 1f2:	80 81       	ld	r24, Z
 1f4:	ab d3       	rcall	.+1878   	; 0x94c <USART_Transmit>
		UC data, C1, C2;
		char str[25] = {'\n','\r','S','e','n','d','i','n','g',' ','E','E','P','R','O','M',' ','v','a','l','u','e','s','\n','\r'};
		UC p_str[19] = {'P','a','g','e','s',' ','t','o',' ','b','e',' ','r','e','a','d',' ','=', ' '};
		USART_init(MyBaud);
		i2c_init();
		for(uint8_t i = 0; i < 25; i++){
 1f6:	1f 5f       	subi	r17, 0xFF	; 255
 1f8:	19 31       	cpi	r17, 0x19	; 25
 1fa:	a8 f3       	brcs	.-22     	; 0x1e6 <main+0x152>
			USART_Transmit(str[i]);
		}
		i2c_start();
 1fc:	8c d3       	rcall	.+1816   	; 0x916 <i2c_start>
		i2c_write(EEPROM1_WR);
 1fe:	82 ea       	ldi	r24, 0xA2	; 162
 200:	59 d3       	rcall	.+1714   	; 0x8b4 <i2c_write>
		i2c_write(0x00);
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	57 d3       	rcall	.+1710   	; 0x8b4 <i2c_write>
		i2c_write(0x00);
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	55 d3       	rcall	.+1706   	; 0x8b4 <i2c_write>
		i2c_start();
 20a:	85 d3       	rcall	.+1802   	; 0x916 <i2c_start>
		i2c_write(EEPROM1_RD);
 20c:	83 ea       	ldi	r24, 0xA3	; 163
 20e:	52 d3       	rcall	.+1700   	; 0x8b4 <i2c_write>
		num_pages = i2c_read(1);
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	3a d3       	rcall	.+1652   	; 0x888 <i2c_read>
 214:	d8 2e       	mov	r13, r24
		i2c_stop();
 216:	a6 d3       	rcall	.+1868   	; 0x964 <i2c_stop>
		hex2ascii(num_pages, &C1, &C2);
 218:	ae 01       	movw	r20, r28
 21a:	43 5d       	subi	r20, 0xD3	; 211
 21c:	5f 4f       	sbci	r21, 0xFF	; 255
 21e:	be 01       	movw	r22, r28
 220:	62 5d       	subi	r22, 0xD2	; 210
 222:	7f 4f       	sbci	r23, 0xFF	; 255
 224:	8d 2d       	mov	r24, r13
 226:	aa d2       	rcall	.+1364   	; 0x77c <hex2ascii>
		for(uint8_t i = 0; i < 19; i++){
 228:	10 e0       	ldi	r17, 0x00	; 0
 22a:	09 c0       	rjmp	.+18     	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
			USART_Transmit(p_str[i]);
 22c:	ea e1       	ldi	r30, 0x1A	; 26
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	ec 0f       	add	r30, r28
 232:	fd 1f       	adc	r31, r29
 234:	e1 0f       	add	r30, r17
 236:	f1 1d       	adc	r31, r1
 238:	80 81       	ld	r24, Z
 23a:	88 d3       	rcall	.+1808   	; 0x94c <USART_Transmit>
		i2c_start();
		i2c_write(EEPROM1_RD);
		num_pages = i2c_read(1);
		i2c_stop();
		hex2ascii(num_pages, &C1, &C2);
		for(uint8_t i = 0; i < 19; i++){
 23c:	1f 5f       	subi	r17, 0xFF	; 255
 23e:	13 31       	cpi	r17, 0x13	; 19
 240:	a8 f3       	brcs	.-22     	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
			USART_Transmit(p_str[i]);
		}
		USART_Transmit(C1);
 242:	8e a5       	ldd	r24, Y+46	; 0x2e
 244:	83 d3       	rcall	.+1798   	; 0x94c <USART_Transmit>
		USART_Transmit(C2);
 246:	8d a5       	ldd	r24, Y+45	; 0x2d
 248:	81 d3       	rcall	.+1794   	; 0x94c <USART_Transmit>
		USART_Transmit('\n');
 24a:	8a e0       	ldi	r24, 0x0A	; 10
 24c:	7f d3       	rcall	.+1790   	; 0x94c <USART_Transmit>
		USART_Transmit('\r');
 24e:	8d e0       	ldi	r24, 0x0D	; 13
 250:	7d d3       	rcall	.+1786   	; 0x94c <USART_Transmit>
		}
	}
	//1-0
	else if ((PIND & (1 << PD6)) && !(PIND & (1 << PD7))) {
		uint8_t num_pages;
		uint16_t curr_val = 1;
 252:	ee 24       	eor	r14, r14
 254:	e3 94       	inc	r14
 256:	f1 2c       	mov	r15, r1
		}
		USART_Transmit(C1);
		USART_Transmit(C2);
		USART_Transmit('\n');
		USART_Transmit('\r');
		while(num_pages){
 258:	37 c0       	rjmp	.+110    	; 0x2c8 <__EEPROM_REGION_LENGTH__+0xc8>
			i2c_start();
 25a:	5d d3       	rcall	.+1722   	; 0x916 <i2c_start>
			i2c_write(EEPROM1_WR);
 25c:	82 ea       	ldi	r24, 0xA2	; 162
 25e:	2a d3       	rcall	.+1620   	; 0x8b4 <i2c_write>
			i2c_write((uint8_t)(curr_val >> 8));			//high byte memory address
 260:	8f 2d       	mov	r24, r15
 262:	28 d3       	rcall	.+1616   	; 0x8b4 <i2c_write>
			i2c_write((uint8_t)(curr_val));					//low byte memory address
 264:	8e 2d       	mov	r24, r14
 266:	26 d3       	rcall	.+1612   	; 0x8b4 <i2c_write>
			i2c_start();
 268:	56 d3       	rcall	.+1708   	; 0x916 <i2c_start>
			i2c_write(EEPROM1_RD);
 26a:	83 ea       	ldi	r24, 0xA3	; 163
 26c:	23 d3       	rcall	.+1606   	; 0x8b4 <i2c_write>
			for(int i = 0; i < 63; i++) {
 26e:	00 e0       	ldi	r16, 0x00	; 0
 270:	10 e0       	ldi	r17, 0x00	; 0
 272:	11 c0       	rjmp	.+34     	; 0x296 <__EEPROM_REGION_LENGTH__+0x96>
				data = i2c_read(0);
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	08 d3       	rcall	.+1552   	; 0x888 <i2c_read>
				hex2ascii(data, &C1, &C2);
 278:	ae 01       	movw	r20, r28
 27a:	43 5d       	subi	r20, 0xD3	; 211
 27c:	5f 4f       	sbci	r21, 0xFF	; 255
 27e:	be 01       	movw	r22, r28
 280:	62 5d       	subi	r22, 0xD2	; 210
 282:	7f 4f       	sbci	r23, 0xFF	; 255
 284:	7b d2       	rcall	.+1270   	; 0x77c <hex2ascii>
				USART_Transmit(C1);
 286:	8e a5       	ldd	r24, Y+46	; 0x2e
 288:	61 d3       	rcall	.+1730   	; 0x94c <USART_Transmit>
				USART_Transmit(C2);
 28a:	8d a5       	ldd	r24, Y+45	; 0x2d
 28c:	5f d3       	rcall	.+1726   	; 0x94c <USART_Transmit>
				USART_Transmit(',');
 28e:	8c e2       	ldi	r24, 0x2C	; 44
 290:	5d d3       	rcall	.+1722   	; 0x94c <USART_Transmit>
			i2c_write(EEPROM1_WR);
			i2c_write((uint8_t)(curr_val >> 8));			//high byte memory address
			i2c_write((uint8_t)(curr_val));					//low byte memory address
			i2c_start();
			i2c_write(EEPROM1_RD);
			for(int i = 0; i < 63; i++) {
 292:	0f 5f       	subi	r16, 0xFF	; 255
 294:	1f 4f       	sbci	r17, 0xFF	; 255
 296:	0f 33       	cpi	r16, 0x3F	; 63
 298:	11 05       	cpc	r17, r1
 29a:	64 f3       	brlt	.-40     	; 0x274 <__EEPROM_REGION_LENGTH__+0x74>
				hex2ascii(data, &C1, &C2);
				USART_Transmit(C1);
				USART_Transmit(C2);
				USART_Transmit(',');
			}
			data = i2c_read(1);
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	f4 d2       	rcall	.+1512   	; 0x888 <i2c_read>
 2a0:	18 2f       	mov	r17, r24
			i2c_stop();
 2a2:	60 d3       	rcall	.+1728   	; 0x964 <i2c_stop>
			hex2ascii(data, &C1, &C2);
 2a4:	ae 01       	movw	r20, r28
 2a6:	43 5d       	subi	r20, 0xD3	; 211
 2a8:	5f 4f       	sbci	r21, 0xFF	; 255
 2aa:	be 01       	movw	r22, r28
 2ac:	62 5d       	subi	r22, 0xD2	; 210
 2ae:	7f 4f       	sbci	r23, 0xFF	; 255
 2b0:	81 2f       	mov	r24, r17
 2b2:	64 d2       	rcall	.+1224   	; 0x77c <hex2ascii>
			USART_Transmit(C1);
 2b4:	8e a5       	ldd	r24, Y+46	; 0x2e
 2b6:	4a d3       	rcall	.+1684   	; 0x94c <USART_Transmit>
			USART_Transmit(C2);
 2b8:	8d a5       	ldd	r24, Y+45	; 0x2d
 2ba:	48 d3       	rcall	.+1680   	; 0x94c <USART_Transmit>
			USART_Transmit(',');
 2bc:	8c e2       	ldi	r24, 0x2C	; 44
 2be:	46 d3       	rcall	.+1676   	; 0x94c <USART_Transmit>
			curr_val = curr_val+64;
 2c0:	f0 e4       	ldi	r31, 0x40	; 64
 2c2:	ef 0e       	add	r14, r31
 2c4:	f1 1c       	adc	r15, r1
			num_pages--;
 2c6:	da 94       	dec	r13
		}
		USART_Transmit(C1);
		USART_Transmit(C2);
		USART_Transmit('\n');
		USART_Transmit('\r');
		while(num_pages){
 2c8:	d1 10       	cpse	r13, r1
 2ca:	c7 cf       	rjmp	.-114    	; 0x25a <__EEPROM_REGION_LENGTH__+0x5a>
			curr_val = curr_val+64;
			num_pages--;
		}
	}
	return 0;
}
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	ae 96       	adiw	r28, 0x2e	; 46
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	f8 94       	cli
 2d6:	de bf       	out	0x3e, r29	; 62
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	cd bf       	out	0x3d, r28	; 61
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	ff 90       	pop	r15
 2e6:	ef 90       	pop	r14
 2e8:	df 90       	pop	r13
 2ea:	cf 90       	pop	r12
 2ec:	bf 90       	pop	r11
 2ee:	08 95       	ret

Disassembly of section .text.ADC_init:

000008a0 <ADC_init>:
#include <avr/io.h>
#include "MyADC.h"


void ADC_init(void){
	ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);		// ADC enable, pre-scalar set to divide clock by 128
 8a0:	86 b1       	in	r24, 0x06	; 6
 8a2:	87 68       	ori	r24, 0x87	; 135
 8a4:	86 b9       	out	0x06, r24	; 6
	ADMUX |= ((1 << REFS0) | (1<<ADLAR));											// Vref is Vcc, left-adjuste)d
 8a6:	87 b1       	in	r24, 0x07	; 7
 8a8:	80 66       	ori	r24, 0x60	; 96
 8aa:	87 b9       	out	0x07, r24	; 7
	ADMUX &= ~((1 << MUX3)|(1<<MUX2));
 8ac:	87 b1       	in	r24, 0x07	; 7
 8ae:	83 7f       	andi	r24, 0xF3	; 243
 8b0:	87 b9       	out	0x07, r24	; 7
 8b2:	08 95       	ret

Disassembly of section .text.read_ADC1:

000007e6 <read_ADC1>:
	ADMUX |= (1<<ADLAR);   // Left adjust result.
	return (ADCH);   //Take only the high 8 bits and drop the lower 2 bits. Equivalent to dividing result by 4.
}

float read_ADC1(void){
	ADMUX = ((ADMUX & ~(1 << MUX1)) | (1 << MUX0));
 7e6:	87 b1       	in	r24, 0x07	; 7
 7e8:	8c 7f       	andi	r24, 0xFC	; 252
 7ea:	81 60       	ori	r24, 0x01	; 1
 7ec:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
 7ee:	86 b1       	in	r24, 0x06	; 6
 7f0:	80 64       	ori	r24, 0x40	; 64
 7f2:	86 b9       	out	0x06, r24	; 6
	while (!(ADCSRA & (1<<ADIF)));
 7f4:	34 9b       	sbis	0x06, 4	; 6
 7f6:	fe cf       	rjmp	.-4      	; 0x7f4 <read_ADC1+0xe>
	ADMUX |= (1<<ADLAR);											// Left adjust result.
 7f8:	87 b1       	in	r24, 0x07	; 7
 7fa:	80 62       	ori	r24, 0x20	; 32
 7fc:	87 b9       	out	0x07, r24	; 7
	return (float)(ADCH);									//Take only the high 8 bits and drop the lower 2 bits. Equivalent to dividing result by 4.
 7fe:	65 b1       	in	r22, 0x05	; 5
 800:	70 e0       	ldi	r23, 0x00	; 0
 802:	80 e0       	ldi	r24, 0x00	; 0
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	0b df       	rcall	.-490    	; 0x61e <__floatunsisf>
}
 808:	08 95       	ret

Disassembly of section .text.read_ADC2:

0000080a <read_ADC2>:

float read_ADC2(void){
	ADMUX = (ADMUX & ~(1 << MUX0)) | (1 << MUX1);
 80a:	87 b1       	in	r24, 0x07	; 7
 80c:	8c 7f       	andi	r24, 0xFC	; 252
 80e:	82 60       	ori	r24, 0x02	; 2
 810:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
 812:	86 b1       	in	r24, 0x06	; 6
 814:	80 64       	ori	r24, 0x40	; 64
 816:	86 b9       	out	0x06, r24	; 6
	while (!(ADCSRA & (1<<ADIF)));
 818:	34 9b       	sbis	0x06, 4	; 6
 81a:	fe cf       	rjmp	.-4      	; 0x818 <read_ADC2+0xe>
	ADMUX |= (1<<ADLAR);											// Left adjust result.
 81c:	87 b1       	in	r24, 0x07	; 7
 81e:	80 62       	ori	r24, 0x20	; 32
 820:	87 b9       	out	0x07, r24	; 7
	return (float)(ADCH);										//Take only the high 8 bits and drop the lower 2 bits. Equivalent to dividing result by 4.
 822:	65 b1       	in	r22, 0x05	; 5
 824:	70 e0       	ldi	r23, 0x00	; 0
 826:	80 e0       	ldi	r24, 0x00	; 0
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	f9 de       	rcall	.-526    	; 0x61e <__floatunsisf>
}
 82c:	08 95       	ret

Disassembly of section .text.read_ADC1_reg:

00000850 <read_ADC1_reg>:

unsigned char read_ADC1_reg(void){
	ADMUX = ((ADMUX & ~(1 << MUX1)) | (1 << MUX0));
 850:	87 b1       	in	r24, 0x07	; 7
 852:	8c 7f       	andi	r24, 0xFC	; 252
 854:	81 60       	ori	r24, 0x01	; 1
 856:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
 858:	86 b1       	in	r24, 0x06	; 6
 85a:	80 64       	ori	r24, 0x40	; 64
 85c:	86 b9       	out	0x06, r24	; 6
	while (!(ADCSRA & (1<<ADIF)));
 85e:	34 9b       	sbis	0x06, 4	; 6
 860:	fe cf       	rjmp	.-4      	; 0x85e <read_ADC1_reg+0xe>
	ADMUX |= (1<<ADLAR);											// Left adjust result.
 862:	87 b1       	in	r24, 0x07	; 7
 864:	80 62       	ori	r24, 0x20	; 32
 866:	87 b9       	out	0x07, r24	; 7
	return (ADCH);
 868:	85 b1       	in	r24, 0x05	; 5
}
 86a:	08 95       	ret

Disassembly of section .text.read_ADC2_reg:

0000086c <read_ADC2_reg>:

unsigned char read_ADC2_reg(void){
	ADMUX = (ADMUX & ~(1 << MUX0)) | (1 << MUX1);
 86c:	87 b1       	in	r24, 0x07	; 7
 86e:	8c 7f       	andi	r24, 0xFC	; 252
 870:	82 60       	ori	r24, 0x02	; 2
 872:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);											//start conversion
 874:	86 b1       	in	r24, 0x06	; 6
 876:	80 64       	ori	r24, 0x40	; 64
 878:	86 b9       	out	0x06, r24	; 6
	while (!(ADCSRA & (1<<ADIF)));									//wait for ack
 87a:	34 9b       	sbis	0x06, 4	; 6
 87c:	fe cf       	rjmp	.-4      	; 0x87a <read_ADC2_reg+0xe>
	ADMUX |= (1<<ADLAR);											// Left adjust result.
 87e:	87 b1       	in	r24, 0x07	; 7
 880:	80 62       	ori	r24, 0x20	; 32
 882:	87 b9       	out	0x07, r24	; 7
	return (ADCH);										//Take only the high 8 bits and drop the lower 2 bits. Equivalent to dividing result by 4.
 884:	85 b1       	in	r24, 0x05	; 5
 886:	08 95       	ret

Disassembly of section .text.PWM_init:

000007ba <PWM_init>:
void CPE_relay_on(){
	PORTB |= (CPE_Relay);		//set relay - PB2 high
}

void CPE_relay_off(){
	PORTB &= !(CPE_Relay);
 7ba:	87 b3       	in	r24, 0x17	; 23
 7bc:	86 60       	ori	r24, 0x06	; 6
 7be:	87 bb       	out	0x17, r24	; 23
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	8f bd       	out	0x2f, r24	; 47
 7c4:	8f b5       	in	r24, 0x2f	; 47
 7c6:	80 68       	ori	r24, 0x80	; 128
 7c8:	8f bd       	out	0x2f, r24	; 47
 7ca:	8e b5       	in	r24, 0x2e	; 46
 7cc:	83 60       	ori	r24, 0x03	; 3
 7ce:	8e bd       	out	0x2e, r24	; 46
 7d0:	8f ef       	ldi	r24, 0xFF	; 255
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	9b bd       	out	0x2b, r25	; 43
 7d6:	8a bd       	out	0x2a, r24	; 42
 7d8:	87 e8       	ldi	r24, 0x87	; 135
 7da:	93 e1       	ldi	r25, 0x13	; 19
 7dc:	01 97       	sbiw	r24, 0x01	; 1
 7de:	f1 f7       	brne	.-4      	; 0x7dc <PWM_init+0x22>
 7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <PWM_init+0x28>
 7e2:	00 00       	nop
 7e4:	08 95       	ret

Disassembly of section .text.CPE_relay_on:

00000944 <CPE_relay_on>:
	//start at 100% duty cycle for 20 ms to start quickly
	_delay_ms(20);
}

void CPE_relay_on(){
	PORTB |= (CPE_Relay);		//set relay - PB2 high
 944:	88 b3       	in	r24, 0x18	; 24
 946:	84 60       	ori	r24, 0x04	; 4
 948:	88 bb       	out	0x18, r24	; 24
 94a:	08 95       	ret

Disassembly of section .text.send_CPE_Enable:

000008c2 <send_CPE_Enable>:
	PORTB &= !(CPE_Relay);
}

void send_CPE_Enable(){
	//sets enable pin as output and sets high
	DDRD |= CPE_Enable;
 8c2:	81 b3       	in	r24, 0x11	; 17
 8c4:	80 62       	ori	r24, 0x20	; 32
 8c6:	81 bb       	out	0x11, r24	; 17
	PORTD |= CPE_Enable;
 8c8:	82 b3       	in	r24, 0x12	; 18
 8ca:	80 62       	ori	r24, 0x20	; 32
 8cc:	82 bb       	out	0x12, r24	; 18
 8ce:	08 95       	ret

Disassembly of section .text.USART_init:

000008d0 <USART_init>:
#include "MyUART.h"


//UART Initialization
void USART_init(UI thebaud){
	UBRRH = (thebaud>>8);
 8d0:	90 bd       	out	0x20, r25	; 32
	UBRRL = (UC)(thebaud);
 8d2:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN);
 8d4:	88 e1       	ldi	r24, 0x18	; 24
 8d6:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1 << UCSZ0 )|(1 << UCSZ1 );
 8d8:	86 e8       	ldi	r24, 0x86	; 134
 8da:	80 bd       	out	0x20, r24	; 32
 8dc:	08 95       	ret

Disassembly of section .text.USART_Transmit:

0000094c <USART_Transmit>:
}


void USART_Transmit(UC data){
	while (!(UCSRA & (1<<UDRE))); // Do nothing until UDR is ready for more data to be written to it
 94c:	5d 9b       	sbis	0x0b, 5	; 11
 94e:	fe cf       	rjmp	.-4      	; 0x94c <USART_Transmit>
	UDR = data;
 950:	8c b9       	out	0x0c, r24	; 12
 952:	08 95       	ret

Disassembly of section .text.hex2ascii:

0000077c <hex2ascii>:
		k = k + 1;
	}
}


void hex2ascii(UC inc, UC *c1, UC *c2){
 77c:	cf 93       	push	r28
 77e:	df 93       	push	r29
 780:	ea 01       	movw	r28, r20
	(*c1)=asctab[(inc>>4)&0x0f];
 782:	28 2f       	mov	r18, r24
 784:	22 95       	swap	r18
 786:	2f 70       	andi	r18, 0x0F	; 15
 788:	30 e0       	ldi	r19, 0x00	; 0
 78a:	40 e0       	ldi	r20, 0x00	; 0
 78c:	2e 57       	subi	r18, 0x7E	; 126
 78e:	3f 4f       	sbci	r19, 0xFF	; 255
 790:	4f 4f       	sbci	r20, 0xFF	; 255
 792:	f9 01       	movw	r30, r18
 794:	94 91       	lpm	r25, Z
 796:	47 fd       	sbrc	r20, 7
 798:	90 81       	ld	r25, Z
 79a:	fb 01       	movw	r30, r22
 79c:	90 83       	st	Z, r25
	(*c2)=asctab[inc& 0x0f];
 79e:	8f 70       	andi	r24, 0x0F	; 15
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	a0 e0       	ldi	r26, 0x00	; 0
 7a4:	8e 57       	subi	r24, 0x7E	; 126
 7a6:	9f 4f       	sbci	r25, 0xFF	; 255
 7a8:	af 4f       	sbci	r26, 0xFF	; 255
 7aa:	fc 01       	movw	r30, r24
 7ac:	84 91       	lpm	r24, Z
 7ae:	a7 fd       	sbrc	r26, 7
 7b0:	80 81       	ld	r24, Z
 7b2:	88 83       	st	Y, r24
}
 7b4:	df 91       	pop	r29
 7b6:	cf 91       	pop	r28
 7b8:	08 95       	ret

Disassembly of section .text.getM:

000002f0 <getM>:
	error = 0;
	e_i = 0;
}
*/

uint8_t getM(float dv, float mv){
 2f0:	4f 92       	push	r4
 2f2:	5f 92       	push	r5
 2f4:	6f 92       	push	r6
 2f6:	7f 92       	push	r7
 2f8:	8f 92       	push	r8
 2fa:	9f 92       	push	r9
 2fc:	af 92       	push	r10
 2fe:	bf 92       	push	r11
 300:	cf 92       	push	r12
 302:	df 92       	push	r13
 304:	ef 92       	push	r14
 306:	ff 92       	push	r15
	//dv is desired value that comes from pin pin 24 PC1, ADC1
	//mv is measured value that comes from pin 23 - PC0, ADC0
	error = dv - mv;
 308:	18 d3       	rcall	.+1584   	; 0x93a <__subsf3>
 30a:	6b 01       	movw	r12, r22
 30c:	7c 01       	movw	r14, r24
 30e:	60 93 ac 00 	sts	0x00AC, r22	; 0x8000ac <error>
 312:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <error+0x1>
 316:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <error+0x2>
 31a:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <error+0x3>
	temp_err = error-prev_error;
 31e:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <prev_error>
 322:	30 91 b1 00 	lds	r19, 0x00B1	; 0x8000b1 <prev_error+0x1>
 326:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <prev_error+0x2>
 32a:	50 91 b3 00 	lds	r21, 0x00B3	; 0x8000b3 <prev_error+0x3>
 32e:	05 d3       	rcall	.+1546   	; 0x93a <__subsf3>
 330:	2b 01       	movw	r4, r22
 332:	3c 01       	movw	r6, r24
 334:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <_edata>
 338:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <_edata+0x1>
 33c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <_edata+0x2>
 340:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <_edata+0x3>
	e_i = e_i + error;
 344:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <e_i>
 348:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <e_i+0x1>
 34c:	40 91 aa 00 	lds	r20, 0x00AA	; 0x8000aa <e_i+0x2>
 350:	50 91 ab 00 	lds	r21, 0x00AB	; 0x8000ab <e_i+0x3>
 354:	c7 01       	movw	r24, r14
 356:	b6 01       	movw	r22, r12
 358:	f1 d2       	rcall	.+1506   	; 0x93c <__addsf3>
 35a:	4b 01       	movw	r8, r22
 35c:	5c 01       	movw	r10, r24
 35e:	60 93 a8 00 	sts	0x00A8, r22	; 0x8000a8 <e_i>
 362:	70 93 a9 00 	sts	0x00A9, r23	; 0x8000a9 <e_i+0x1>
 366:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <e_i+0x2>
 36a:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <e_i+0x3>
	if (e_i > up_lim){
 36e:	20 e0       	ldi	r18, 0x00	; 0
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	4a ef       	ldi	r20, 0xFA	; 250
 374:	53 e4       	ldi	r21, 0x43	; 67
 376:	f2 d2       	rcall	.+1508   	; 0x95c <__gesf2>
 378:	18 16       	cp	r1, r24
 37a:	6c f4       	brge	.+26     	; 0x396 <getM+0xa6>
		e_i = up_lim;
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	aa ef       	ldi	r26, 0xFA	; 250
 382:	b3 e4       	ldi	r27, 0x43	; 67
 384:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <e_i>
 388:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <e_i+0x1>
 38c:	a0 93 aa 00 	sts	0x00AA, r26	; 0x8000aa <e_i+0x2>
 390:	b0 93 ab 00 	sts	0x00AB, r27	; 0x8000ab <e_i+0x3>
 394:	15 c0       	rjmp	.+42     	; 0x3c0 <getM+0xd0>
	}
	else if (e_i < low_lim){
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	4a ef       	ldi	r20, 0xFA	; 250
 39c:	53 ec       	ldi	r21, 0xC3	; 195
 39e:	c5 01       	movw	r24, r10
 3a0:	b4 01       	movw	r22, r8
 3a2:	d8 d2       	rcall	.+1456   	; 0x954 <__cmpsf2>
 3a4:	88 23       	and	r24, r24
 3a6:	64 f4       	brge	.+24     	; 0x3c0 <getM+0xd0>
		e_i = low_lim;
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	aa ef       	ldi	r26, 0xFA	; 250
 3ae:	b3 ec       	ldi	r27, 0xC3	; 195
 3b0:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <e_i>
 3b4:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <e_i+0x1>
 3b8:	a0 93 aa 00 	sts	0x00AA, r26	; 0x8000aa <e_i+0x2>
 3bc:	b0 93 ab 00 	sts	0x00AB, r27	; 0x8000ab <e_i+0x3>
	}
	float temp_m = Kp*error+Ki*e_i+Kd*temp_err;
 3c0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <Kp>
 3c4:	30 91 e9 00 	lds	r19, 0x00E9	; 0x8000e9 <Kp+0x1>
 3c8:	40 91 ea 00 	lds	r20, 0x00EA	; 0x8000ea <Kp+0x2>
 3cc:	50 91 eb 00 	lds	r21, 0x00EB	; 0x8000eb <Kp+0x3>
 3d0:	c7 01       	movw	r24, r14
 3d2:	b6 01       	movw	r22, r12
 3d4:	cd d2       	rcall	.+1434   	; 0x970 <__mulsf3>
 3d6:	4b 01       	movw	r8, r22
 3d8:	5c 01       	movw	r10, r24
 3da:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <e_i>
 3de:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <e_i+0x1>
 3e2:	40 91 aa 00 	lds	r20, 0x00AA	; 0x8000aa <e_i+0x2>
 3e6:	50 91 ab 00 	lds	r21, 0x00AB	; 0x8000ab <e_i+0x3>
 3ea:	60 91 e4 00 	lds	r22, 0x00E4	; 0x8000e4 <Ki>
 3ee:	70 91 e5 00 	lds	r23, 0x00E5	; 0x8000e5 <Ki+0x1>
 3f2:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <Ki+0x2>
 3f6:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <Ki+0x3>
 3fa:	ba d2       	rcall	.+1396   	; 0x970 <__mulsf3>
 3fc:	9b 01       	movw	r18, r22
 3fe:	ac 01       	movw	r20, r24
 400:	c5 01       	movw	r24, r10
 402:	b4 01       	movw	r22, r8
 404:	9b d2       	rcall	.+1334   	; 0x93c <__addsf3>
 406:	4b 01       	movw	r8, r22
 408:	5c 01       	movw	r10, r24
 40a:	20 91 e0 00 	lds	r18, 0x00E0	; 0x8000e0 <Kd>
 40e:	30 91 e1 00 	lds	r19, 0x00E1	; 0x8000e1 <Kd+0x1>
 412:	40 91 e2 00 	lds	r20, 0x00E2	; 0x8000e2 <Kd+0x2>
 416:	50 91 e3 00 	lds	r21, 0x00E3	; 0x8000e3 <Kd+0x3>
 41a:	c3 01       	movw	r24, r6
 41c:	b2 01       	movw	r22, r4
 41e:	a8 d2       	rcall	.+1360   	; 0x970 <__mulsf3>
 420:	9b 01       	movw	r18, r22
 422:	ac 01       	movw	r20, r24
 424:	c5 01       	movw	r24, r10
 426:	b4 01       	movw	r22, r8
 428:	89 d2       	rcall	.+1298   	; 0x93c <__addsf3>
 42a:	4b 01       	movw	r8, r22
 42c:	5c 01       	movw	r10, r24
	if (temp_m > PWM_uplim){
 42e:	20 e0       	ldi	r18, 0x00	; 0
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	4f e7       	ldi	r20, 0x7F	; 127
 434:	53 e4       	ldi	r21, 0x43	; 67
 436:	92 d2       	rcall	.+1316   	; 0x95c <__gesf2>
 438:	18 16       	cp	r1, r24
 43a:	4c f0       	brlt	.+18     	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
		temp_m = PWM_uplim;
	}
	else if (temp_m < PWM_lowlim){
 43c:	20 e0       	ldi	r18, 0x00	; 0
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	a9 01       	movw	r20, r18
 442:	c5 01       	movw	r24, r10
 444:	b4 01       	movw	r22, r8
 446:	86 d2       	rcall	.+1292   	; 0x954 <__cmpsf2>
 448:	88 23       	and	r24, r24
 44a:	6c f4       	brge	.+26     	; 0x466 <__stack+0x7>
 44c:	09 c0       	rjmp	.+18     	; 0x460 <__stack+0x1>
	else if (e_i < low_lim){
		e_i = low_lim;
	}
	float temp_m = Kp*error+Ki*e_i+Kd*temp_err;
	if (temp_m > PWM_uplim){
		temp_m = PWM_uplim;
 44e:	0f 2e       	mov	r0, r31
 450:	81 2c       	mov	r8, r1
 452:	91 2c       	mov	r9, r1
 454:	ff e7       	ldi	r31, 0x7F	; 127
 456:	af 2e       	mov	r10, r31
 458:	f3 e4       	ldi	r31, 0x43	; 67
 45a:	bf 2e       	mov	r11, r31
 45c:	f0 2d       	mov	r31, r0
 45e:	03 c0       	rjmp	.+6      	; 0x466 <__stack+0x7>
	}
	else if (temp_m < PWM_lowlim){
		temp_m = PWM_lowlim;
 460:	81 2c       	mov	r8, r1
 462:	91 2c       	mov	r9, r1
 464:	54 01       	movw	r10, r8
	}
	prev_error = error;
 466:	c0 92 b0 00 	sts	0x00B0, r12	; 0x8000b0 <prev_error>
 46a:	d0 92 b1 00 	sts	0x00B1, r13	; 0x8000b1 <prev_error+0x1>
 46e:	e0 92 b2 00 	sts	0x00B2, r14	; 0x8000b2 <prev_error+0x2>
 472:	f0 92 b3 00 	sts	0x00B3, r15	; 0x8000b3 <prev_error+0x3>
	return (uint8_t)temp_m;
 476:	c5 01       	movw	r24, r10
 478:	b4 01       	movw	r22, r8
 47a:	0e d1       	rcall	.+540    	; 0x698 <__fixunssfsi>
 47c:	86 2f       	mov	r24, r22
}
 47e:	ff 90       	pop	r15
 480:	ef 90       	pop	r14
 482:	df 90       	pop	r13
 484:	cf 90       	pop	r12
 486:	bf 90       	pop	r11
 488:	af 90       	pop	r10
 48a:	9f 90       	pop	r9
 48c:	8f 90       	pop	r8
 48e:	7f 90       	pop	r7
 490:	6f 90       	pop	r6
 492:	5f 90       	pop	r5
 494:	4f 90       	pop	r4
 496:	08 95       	ret

Disassembly of section .text:

0000093a <__subsf3>:
 93a:	50 58       	subi	r21, 0x80	; 128

0000093c <__addsf3>:
 93c:	bb 27       	eor	r27, r27
 93e:	aa 27       	eor	r26, r26
 940:	0d de       	rcall	.-998    	; 0x55c <__addsf3x>
 942:	75 cf       	rjmp	.-278    	; 0x82e <__fp_round>

Disassembly of section .text:

0000055c <__addsf3x>:
 55c:	0d c0       	rjmp	.+26     	; 0x578 <__addsf3x+0x1c>
 55e:	bf d1       	rcall	.+894    	; 0x8de <__fp_pscA>
 560:	30 f0       	brcs	.+12     	; 0x56e <__addsf3x+0x12>
 562:	c4 d1       	rcall	.+904    	; 0x8ec <__fp_pscB>
 564:	20 f0       	brcs	.+8      	; 0x56e <__addsf3x+0x12>
 566:	31 f4       	brne	.+12     	; 0x574 <__addsf3x+0x18>
 568:	9f 3f       	cpi	r25, 0xFF	; 255
 56a:	11 f4       	brne	.+4      	; 0x570 <__addsf3x+0x14>
 56c:	1e f4       	brtc	.+6      	; 0x574 <__addsf3x+0x18>
 56e:	fd c1       	rjmp	.+1018   	; 0x96a <__fp_nan>
 570:	0e f4       	brtc	.+2      	; 0x574 <__addsf3x+0x18>
 572:	e0 95       	com	r30
 574:	e7 fb       	bst	r30, 7
 576:	db c1       	rjmp	.+950    	; 0x92e <__fp_inf>
 578:	e9 2f       	mov	r30, r25
 57a:	de d0       	rcall	.+444    	; 0x738 <__fp_split3>
 57c:	80 f3       	brcs	.-32     	; 0x55e <__addsf3x+0x2>
 57e:	ba 17       	cp	r27, r26
 580:	62 07       	cpc	r22, r18
 582:	73 07       	cpc	r23, r19
 584:	84 07       	cpc	r24, r20
 586:	95 07       	cpc	r25, r21
 588:	18 f0       	brcs	.+6      	; 0x590 <__addsf3x+0x34>
 58a:	71 f4       	brne	.+28     	; 0x5a8 <__addsf3x+0x4c>
 58c:	9e f5       	brtc	.+102    	; 0x5f4 <__addsf3x+0x98>
 58e:	b5 c1       	rjmp	.+874    	; 0x8fa <__fp_zero>
 590:	0e f4       	brtc	.+2      	; 0x594 <__addsf3x+0x38>
 592:	e0 95       	com	r30
 594:	0b 2e       	mov	r0, r27
 596:	ba 2f       	mov	r27, r26
 598:	a0 2d       	mov	r26, r0
 59a:	0b 01       	movw	r0, r22
 59c:	b9 01       	movw	r22, r18
 59e:	90 01       	movw	r18, r0
 5a0:	0c 01       	movw	r0, r24
 5a2:	ca 01       	movw	r24, r20
 5a4:	a0 01       	movw	r20, r0
 5a6:	11 24       	eor	r1, r1
 5a8:	ff 27       	eor	r31, r31
 5aa:	59 1b       	sub	r21, r25
 5ac:	99 f0       	breq	.+38     	; 0x5d4 <__addsf3x+0x78>
 5ae:	59 3f       	cpi	r21, 0xF9	; 249
 5b0:	50 f4       	brcc	.+20     	; 0x5c6 <__addsf3x+0x6a>
 5b2:	50 3e       	cpi	r21, 0xE0	; 224
 5b4:	68 f1       	brcs	.+90     	; 0x610 <__addsf3x+0xb4>
 5b6:	1a 16       	cp	r1, r26
 5b8:	f0 40       	sbci	r31, 0x00	; 0
 5ba:	a2 2f       	mov	r26, r18
 5bc:	23 2f       	mov	r18, r19
 5be:	34 2f       	mov	r19, r20
 5c0:	44 27       	eor	r20, r20
 5c2:	58 5f       	subi	r21, 0xF8	; 248
 5c4:	f3 cf       	rjmp	.-26     	; 0x5ac <__addsf3x+0x50>
 5c6:	46 95       	lsr	r20
 5c8:	37 95       	ror	r19
 5ca:	27 95       	ror	r18
 5cc:	a7 95       	ror	r26
 5ce:	f0 40       	sbci	r31, 0x00	; 0
 5d0:	53 95       	inc	r21
 5d2:	c9 f7       	brne	.-14     	; 0x5c6 <__addsf3x+0x6a>
 5d4:	7e f4       	brtc	.+30     	; 0x5f4 <__addsf3x+0x98>
 5d6:	1f 16       	cp	r1, r31
 5d8:	ba 0b       	sbc	r27, r26
 5da:	62 0b       	sbc	r22, r18
 5dc:	73 0b       	sbc	r23, r19
 5de:	84 0b       	sbc	r24, r20
 5e0:	ba f0       	brmi	.+46     	; 0x610 <__addsf3x+0xb4>
 5e2:	91 50       	subi	r25, 0x01	; 1
 5e4:	a1 f0       	breq	.+40     	; 0x60e <__addsf3x+0xb2>
 5e6:	ff 0f       	add	r31, r31
 5e8:	bb 1f       	adc	r27, r27
 5ea:	66 1f       	adc	r22, r22
 5ec:	77 1f       	adc	r23, r23
 5ee:	88 1f       	adc	r24, r24
 5f0:	c2 f7       	brpl	.-16     	; 0x5e2 <__addsf3x+0x86>
 5f2:	0e c0       	rjmp	.+28     	; 0x610 <__addsf3x+0xb4>
 5f4:	ba 0f       	add	r27, r26
 5f6:	62 1f       	adc	r22, r18
 5f8:	73 1f       	adc	r23, r19
 5fa:	84 1f       	adc	r24, r20
 5fc:	48 f4       	brcc	.+18     	; 0x610 <__addsf3x+0xb4>
 5fe:	87 95       	ror	r24
 600:	77 95       	ror	r23
 602:	67 95       	ror	r22
 604:	b7 95       	ror	r27
 606:	f7 95       	ror	r31
 608:	9e 3f       	cpi	r25, 0xFE	; 254
 60a:	08 f0       	brcs	.+2      	; 0x60e <__addsf3x+0xb2>
 60c:	b3 cf       	rjmp	.-154    	; 0x574 <__addsf3x+0x18>
 60e:	93 95       	inc	r25
 610:	88 0f       	add	r24, r24
 612:	08 f0       	brcs	.+2      	; 0x616 <__addsf3x+0xba>
 614:	99 27       	eor	r25, r25
 616:	ee 0f       	add	r30, r30
 618:	97 95       	ror	r25
 61a:	87 95       	ror	r24
 61c:	08 95       	ret

Disassembly of section .text:

00000954 <__cmpsf2>:
 954:	cd de       	rcall	.-614    	; 0x6f0 <__fp_cmp>
 956:	08 f4       	brcc	.+2      	; 0x95a <__cmpsf2+0x6>
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	08 95       	ret

Disassembly of section .text:

00000698 <__fixunssfsi>:
 698:	57 d0       	rcall	.+174    	; 0x748 <__fp_splitA>
 69a:	88 f0       	brcs	.+34     	; 0x6be <__fixunssfsi+0x26>
 69c:	9f 57       	subi	r25, 0x7F	; 127
 69e:	90 f0       	brcs	.+36     	; 0x6c4 <__fixunssfsi+0x2c>
 6a0:	b9 2f       	mov	r27, r25
 6a2:	99 27       	eor	r25, r25
 6a4:	b7 51       	subi	r27, 0x17	; 23
 6a6:	a0 f0       	brcs	.+40     	; 0x6d0 <__fixunssfsi+0x38>
 6a8:	d1 f0       	breq	.+52     	; 0x6de <__fixunssfsi+0x46>
 6aa:	66 0f       	add	r22, r22
 6ac:	77 1f       	adc	r23, r23
 6ae:	88 1f       	adc	r24, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	1a f0       	brmi	.+6      	; 0x6ba <__fixunssfsi+0x22>
 6b4:	ba 95       	dec	r27
 6b6:	c9 f7       	brne	.-14     	; 0x6aa <__fixunssfsi+0x12>
 6b8:	12 c0       	rjmp	.+36     	; 0x6de <__fixunssfsi+0x46>
 6ba:	b1 30       	cpi	r27, 0x01	; 1
 6bc:	81 f0       	breq	.+32     	; 0x6de <__fixunssfsi+0x46>
 6be:	1d d1       	rcall	.+570    	; 0x8fa <__fp_zero>
 6c0:	b1 e0       	ldi	r27, 0x01	; 1
 6c2:	08 95       	ret
 6c4:	1a c1       	rjmp	.+564    	; 0x8fa <__fp_zero>
 6c6:	67 2f       	mov	r22, r23
 6c8:	78 2f       	mov	r23, r24
 6ca:	88 27       	eor	r24, r24
 6cc:	b8 5f       	subi	r27, 0xF8	; 248
 6ce:	39 f0       	breq	.+14     	; 0x6de <__fixunssfsi+0x46>
 6d0:	b9 3f       	cpi	r27, 0xF9	; 249
 6d2:	cc f3       	brlt	.-14     	; 0x6c6 <__fixunssfsi+0x2e>
 6d4:	86 95       	lsr	r24
 6d6:	77 95       	ror	r23
 6d8:	67 95       	ror	r22
 6da:	b3 95       	inc	r27
 6dc:	d9 f7       	brne	.-10     	; 0x6d4 <__fixunssfsi+0x3c>
 6de:	3e f4       	brtc	.+14     	; 0x6ee <__fixunssfsi+0x56>
 6e0:	90 95       	com	r25
 6e2:	80 95       	com	r24
 6e4:	70 95       	com	r23
 6e6:	61 95       	neg	r22
 6e8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ea:	8f 4f       	sbci	r24, 0xFF	; 255
 6ec:	9f 4f       	sbci	r25, 0xFF	; 255
 6ee:	08 95       	ret

Disassembly of section .text:

0000061e <__floatunsisf>:
 61e:	e8 94       	clt
 620:	09 c0       	rjmp	.+18     	; 0x634 <__floatsisf+0x12>

00000622 <__floatsisf>:
 622:	97 fb       	bst	r25, 7
 624:	3e f4       	brtc	.+14     	; 0x634 <__floatsisf+0x12>
 626:	90 95       	com	r25
 628:	80 95       	com	r24
 62a:	70 95       	com	r23
 62c:	61 95       	neg	r22
 62e:	7f 4f       	sbci	r23, 0xFF	; 255
 630:	8f 4f       	sbci	r24, 0xFF	; 255
 632:	9f 4f       	sbci	r25, 0xFF	; 255
 634:	99 23       	and	r25, r25
 636:	a9 f0       	breq	.+42     	; 0x662 <__floatsisf+0x40>
 638:	f9 2f       	mov	r31, r25
 63a:	96 e9       	ldi	r25, 0x96	; 150
 63c:	bb 27       	eor	r27, r27
 63e:	93 95       	inc	r25
 640:	f6 95       	lsr	r31
 642:	87 95       	ror	r24
 644:	77 95       	ror	r23
 646:	67 95       	ror	r22
 648:	b7 95       	ror	r27
 64a:	f1 11       	cpse	r31, r1
 64c:	f8 cf       	rjmp	.-16     	; 0x63e <__floatsisf+0x1c>
 64e:	fa f4       	brpl	.+62     	; 0x68e <__floatsisf+0x6c>
 650:	bb 0f       	add	r27, r27
 652:	11 f4       	brne	.+4      	; 0x658 <__floatsisf+0x36>
 654:	60 ff       	sbrs	r22, 0
 656:	1b c0       	rjmp	.+54     	; 0x68e <__floatsisf+0x6c>
 658:	6f 5f       	subi	r22, 0xFF	; 255
 65a:	7f 4f       	sbci	r23, 0xFF	; 255
 65c:	8f 4f       	sbci	r24, 0xFF	; 255
 65e:	9f 4f       	sbci	r25, 0xFF	; 255
 660:	16 c0       	rjmp	.+44     	; 0x68e <__floatsisf+0x6c>
 662:	88 23       	and	r24, r24
 664:	11 f0       	breq	.+4      	; 0x66a <__floatsisf+0x48>
 666:	96 e9       	ldi	r25, 0x96	; 150
 668:	11 c0       	rjmp	.+34     	; 0x68c <__floatsisf+0x6a>
 66a:	77 23       	and	r23, r23
 66c:	21 f0       	breq	.+8      	; 0x676 <__floatsisf+0x54>
 66e:	9e e8       	ldi	r25, 0x8E	; 142
 670:	87 2f       	mov	r24, r23
 672:	76 2f       	mov	r23, r22
 674:	05 c0       	rjmp	.+10     	; 0x680 <__floatsisf+0x5e>
 676:	66 23       	and	r22, r22
 678:	71 f0       	breq	.+28     	; 0x696 <__floatsisf+0x74>
 67a:	96 e8       	ldi	r25, 0x86	; 134
 67c:	86 2f       	mov	r24, r22
 67e:	70 e0       	ldi	r23, 0x00	; 0
 680:	60 e0       	ldi	r22, 0x00	; 0
 682:	2a f0       	brmi	.+10     	; 0x68e <__floatsisf+0x6c>
 684:	9a 95       	dec	r25
 686:	66 0f       	add	r22, r22
 688:	77 1f       	adc	r23, r23
 68a:	88 1f       	adc	r24, r24
 68c:	da f7       	brpl	.-10     	; 0x684 <__floatsisf+0x62>
 68e:	88 0f       	add	r24, r24
 690:	96 95       	lsr	r25
 692:	87 95       	ror	r24
 694:	97 f9       	bld	r25, 7
 696:	08 95       	ret

Disassembly of section .text:

000006f0 <__fp_cmp>:
 6f0:	99 0f       	add	r25, r25
 6f2:	00 08       	sbc	r0, r0
 6f4:	55 0f       	add	r21, r21
 6f6:	aa 0b       	sbc	r26, r26
 6f8:	e0 e8       	ldi	r30, 0x80	; 128
 6fa:	fe ef       	ldi	r31, 0xFE	; 254
 6fc:	16 16       	cp	r1, r22
 6fe:	17 06       	cpc	r1, r23
 700:	e8 07       	cpc	r30, r24
 702:	f9 07       	cpc	r31, r25
 704:	c0 f0       	brcs	.+48     	; 0x736 <__fp_cmp+0x46>
 706:	12 16       	cp	r1, r18
 708:	13 06       	cpc	r1, r19
 70a:	e4 07       	cpc	r30, r20
 70c:	f5 07       	cpc	r31, r21
 70e:	98 f0       	brcs	.+38     	; 0x736 <__fp_cmp+0x46>
 710:	62 1b       	sub	r22, r18
 712:	73 0b       	sbc	r23, r19
 714:	84 0b       	sbc	r24, r20
 716:	95 0b       	sbc	r25, r21
 718:	39 f4       	brne	.+14     	; 0x728 <__fp_cmp+0x38>
 71a:	0a 26       	eor	r0, r26
 71c:	61 f0       	breq	.+24     	; 0x736 <__fp_cmp+0x46>
 71e:	23 2b       	or	r18, r19
 720:	24 2b       	or	r18, r20
 722:	25 2b       	or	r18, r21
 724:	21 f4       	brne	.+8      	; 0x72e <__fp_cmp+0x3e>
 726:	08 95       	ret
 728:	0a 26       	eor	r0, r26
 72a:	09 f4       	brne	.+2      	; 0x72e <__fp_cmp+0x3e>
 72c:	a1 40       	sbci	r26, 0x01	; 1
 72e:	a6 95       	lsr	r26
 730:	8f ef       	ldi	r24, 0xFF	; 255
 732:	81 1d       	adc	r24, r1
 734:	81 1d       	adc	r24, r1
 736:	08 95       	ret

Disassembly of section .text:

0000092e <__fp_inf>:
 92e:	97 f9       	bld	r25, 7
 930:	9f 67       	ori	r25, 0x7F	; 127
 932:	80 e8       	ldi	r24, 0x80	; 128
 934:	70 e0       	ldi	r23, 0x00	; 0
 936:	60 e0       	ldi	r22, 0x00	; 0
 938:	08 95       	ret

Disassembly of section .text:

0000096a <__fp_nan>:
 96a:	9f ef       	ldi	r25, 0xFF	; 255
 96c:	80 ec       	ldi	r24, 0xC0	; 192
 96e:	08 95       	ret

Disassembly of section .text:

000008de <__fp_pscA>:
 8de:	00 24       	eor	r0, r0
 8e0:	0a 94       	dec	r0
 8e2:	16 16       	cp	r1, r22
 8e4:	17 06       	cpc	r1, r23
 8e6:	18 06       	cpc	r1, r24
 8e8:	09 06       	cpc	r0, r25
 8ea:	08 95       	ret

Disassembly of section .text:

000008ec <__fp_pscB>:
 8ec:	00 24       	eor	r0, r0
 8ee:	0a 94       	dec	r0
 8f0:	12 16       	cp	r1, r18
 8f2:	13 06       	cpc	r1, r19
 8f4:	14 06       	cpc	r1, r20
 8f6:	05 06       	cpc	r0, r21
 8f8:	08 95       	ret

Disassembly of section .text:

0000082e <__fp_round>:
 82e:	09 2e       	mov	r0, r25
 830:	03 94       	inc	r0
 832:	00 0c       	add	r0, r0
 834:	11 f4       	brne	.+4      	; 0x83a <__fp_round+0xc>
 836:	88 23       	and	r24, r24
 838:	52 f0       	brmi	.+20     	; 0x84e <__fp_round+0x20>
 83a:	bb 0f       	add	r27, r27
 83c:	40 f4       	brcc	.+16     	; 0x84e <__fp_round+0x20>
 83e:	bf 2b       	or	r27, r31
 840:	11 f4       	brne	.+4      	; 0x846 <__fp_round+0x18>
 842:	60 ff       	sbrs	r22, 0
 844:	04 c0       	rjmp	.+8      	; 0x84e <__fp_round+0x20>
 846:	6f 5f       	subi	r22, 0xFF	; 255
 848:	7f 4f       	sbci	r23, 0xFF	; 255
 84a:	8f 4f       	sbci	r24, 0xFF	; 255
 84c:	9f 4f       	sbci	r25, 0xFF	; 255
 84e:	08 95       	ret

Disassembly of section .text:

00000738 <__fp_split3>:
 738:	57 fd       	sbrc	r21, 7
 73a:	90 58       	subi	r25, 0x80	; 128
 73c:	44 0f       	add	r20, r20
 73e:	55 1f       	adc	r21, r21
 740:	59 f0       	breq	.+22     	; 0x758 <__fp_splitA+0x10>
 742:	5f 3f       	cpi	r21, 0xFF	; 255
 744:	71 f0       	breq	.+28     	; 0x762 <__fp_splitA+0x1a>
 746:	47 95       	ror	r20

00000748 <__fp_splitA>:
 748:	88 0f       	add	r24, r24
 74a:	97 fb       	bst	r25, 7
 74c:	99 1f       	adc	r25, r25
 74e:	61 f0       	breq	.+24     	; 0x768 <__fp_splitA+0x20>
 750:	9f 3f       	cpi	r25, 0xFF	; 255
 752:	79 f0       	breq	.+30     	; 0x772 <__fp_splitA+0x2a>
 754:	87 95       	ror	r24
 756:	08 95       	ret
 758:	12 16       	cp	r1, r18
 75a:	13 06       	cpc	r1, r19
 75c:	14 06       	cpc	r1, r20
 75e:	55 1f       	adc	r21, r21
 760:	f2 cf       	rjmp	.-28     	; 0x746 <__fp_split3+0xe>
 762:	46 95       	lsr	r20
 764:	f1 df       	rcall	.-30     	; 0x748 <__fp_splitA>
 766:	08 c0       	rjmp	.+16     	; 0x778 <__fp_splitA+0x30>
 768:	16 16       	cp	r1, r22
 76a:	17 06       	cpc	r1, r23
 76c:	18 06       	cpc	r1, r24
 76e:	99 1f       	adc	r25, r25
 770:	f1 cf       	rjmp	.-30     	; 0x754 <__fp_splitA+0xc>
 772:	86 95       	lsr	r24
 774:	71 05       	cpc	r23, r1
 776:	61 05       	cpc	r22, r1
 778:	08 94       	sec
 77a:	08 95       	ret

Disassembly of section .text:

000008fa <__fp_zero>:
 8fa:	e8 94       	clt

000008fc <__fp_szero>:
 8fc:	bb 27       	eor	r27, r27
 8fe:	66 27       	eor	r22, r22
 900:	77 27       	eor	r23, r23
 902:	cb 01       	movw	r24, r22
 904:	97 f9       	bld	r25, 7
 906:	08 95       	ret

Disassembly of section .text:

0000095c <__gesf2>:
 95c:	c9 de       	rcall	.-622    	; 0x6f0 <__fp_cmp>
 95e:	08 f4       	brcc	.+2      	; 0x962 <__gesf2+0x6>
 960:	8f ef       	ldi	r24, 0xFF	; 255
 962:	08 95       	ret

Disassembly of section .text:

00000970 <__mulsf3>:
 970:	93 dd       	rcall	.-1242   	; 0x498 <__mulsf3x>
 972:	5d cf       	rjmp	.-326    	; 0x82e <__fp_round>

Disassembly of section .text:

00000498 <__mulsf3x>:
 498:	0a c0       	rjmp	.+20     	; 0x4ae <__mulsf3x+0x16>
 49a:	21 d2       	rcall	.+1090   	; 0x8de <__fp_pscA>
 49c:	28 f0       	brcs	.+10     	; 0x4a8 <__mulsf3x+0x10>
 49e:	26 d2       	rcall	.+1100   	; 0x8ec <__fp_pscB>
 4a0:	18 f0       	brcs	.+6      	; 0x4a8 <__mulsf3x+0x10>
 4a2:	95 23       	and	r25, r21
 4a4:	09 f0       	breq	.+2      	; 0x4a8 <__mulsf3x+0x10>
 4a6:	43 c2       	rjmp	.+1158   	; 0x92e <__fp_inf>
 4a8:	60 c2       	rjmp	.+1216   	; 0x96a <__fp_nan>
 4aa:	11 24       	eor	r1, r1
 4ac:	27 c2       	rjmp	.+1102   	; 0x8fc <__fp_szero>
 4ae:	44 d1       	rcall	.+648    	; 0x738 <__fp_split3>
 4b0:	a0 f3       	brcs	.-24     	; 0x49a <__mulsf3x+0x2>

000004b2 <__mulsf3_pse>:
 4b2:	95 9f       	mul	r25, r21
 4b4:	d1 f3       	breq	.-12     	; 0x4aa <__mulsf3x+0x12>
 4b6:	95 0f       	add	r25, r21
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	55 1f       	adc	r21, r21
 4bc:	62 9f       	mul	r22, r18
 4be:	f0 01       	movw	r30, r0
 4c0:	72 9f       	mul	r23, r18
 4c2:	bb 27       	eor	r27, r27
 4c4:	f0 0d       	add	r31, r0
 4c6:	b1 1d       	adc	r27, r1
 4c8:	63 9f       	mul	r22, r19
 4ca:	aa 27       	eor	r26, r26
 4cc:	f0 0d       	add	r31, r0
 4ce:	b1 1d       	adc	r27, r1
 4d0:	aa 1f       	adc	r26, r26
 4d2:	64 9f       	mul	r22, r20
 4d4:	66 27       	eor	r22, r22
 4d6:	b0 0d       	add	r27, r0
 4d8:	a1 1d       	adc	r26, r1
 4da:	66 1f       	adc	r22, r22
 4dc:	82 9f       	mul	r24, r18
 4de:	22 27       	eor	r18, r18
 4e0:	b0 0d       	add	r27, r0
 4e2:	a1 1d       	adc	r26, r1
 4e4:	62 1f       	adc	r22, r18
 4e6:	73 9f       	mul	r23, r19
 4e8:	b0 0d       	add	r27, r0
 4ea:	a1 1d       	adc	r26, r1
 4ec:	62 1f       	adc	r22, r18
 4ee:	83 9f       	mul	r24, r19
 4f0:	a0 0d       	add	r26, r0
 4f2:	61 1d       	adc	r22, r1
 4f4:	22 1f       	adc	r18, r18
 4f6:	74 9f       	mul	r23, r20
 4f8:	33 27       	eor	r19, r19
 4fa:	a0 0d       	add	r26, r0
 4fc:	61 1d       	adc	r22, r1
 4fe:	23 1f       	adc	r18, r19
 500:	84 9f       	mul	r24, r20
 502:	60 0d       	add	r22, r0
 504:	21 1d       	adc	r18, r1
 506:	82 2f       	mov	r24, r18
 508:	76 2f       	mov	r23, r22
 50a:	6a 2f       	mov	r22, r26
 50c:	11 24       	eor	r1, r1
 50e:	9f 57       	subi	r25, 0x7F	; 127
 510:	50 40       	sbci	r21, 0x00	; 0
 512:	8a f0       	brmi	.+34     	; 0x536 <__mulsf3_pse+0x84>
 514:	e1 f0       	breq	.+56     	; 0x54e <__mulsf3_pse+0x9c>
 516:	88 23       	and	r24, r24
 518:	4a f0       	brmi	.+18     	; 0x52c <__mulsf3_pse+0x7a>
 51a:	ee 0f       	add	r30, r30
 51c:	ff 1f       	adc	r31, r31
 51e:	bb 1f       	adc	r27, r27
 520:	66 1f       	adc	r22, r22
 522:	77 1f       	adc	r23, r23
 524:	88 1f       	adc	r24, r24
 526:	91 50       	subi	r25, 0x01	; 1
 528:	50 40       	sbci	r21, 0x00	; 0
 52a:	a9 f7       	brne	.-22     	; 0x516 <__mulsf3_pse+0x64>
 52c:	9e 3f       	cpi	r25, 0xFE	; 254
 52e:	51 05       	cpc	r21, r1
 530:	70 f0       	brcs	.+28     	; 0x54e <__mulsf3_pse+0x9c>
 532:	fd c1       	rjmp	.+1018   	; 0x92e <__fp_inf>
 534:	e3 c1       	rjmp	.+966    	; 0x8fc <__fp_szero>
 536:	5f 3f       	cpi	r21, 0xFF	; 255
 538:	ec f3       	brlt	.-6      	; 0x534 <__mulsf3_pse+0x82>
 53a:	98 3e       	cpi	r25, 0xE8	; 232
 53c:	dc f3       	brlt	.-10     	; 0x534 <__mulsf3_pse+0x82>
 53e:	86 95       	lsr	r24
 540:	77 95       	ror	r23
 542:	67 95       	ror	r22
 544:	b7 95       	ror	r27
 546:	f7 95       	ror	r31
 548:	e7 95       	ror	r30
 54a:	9f 5f       	subi	r25, 0xFF	; 255
 54c:	c1 f7       	brne	.-16     	; 0x53e <__mulsf3_pse+0x8c>
 54e:	fe 2b       	or	r31, r30
 550:	88 0f       	add	r24, r24
 552:	91 1d       	adc	r25, r1
 554:	96 95       	lsr	r25
 556:	87 95       	ror	r24
 558:	97 f9       	bld	r25, 7
 55a:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000976 <_fini>:
 976:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000978 <__funcs_on_exit>:
 978:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000097a <__simulator_exit>:
 97a:	08 95       	ret

Disassembly of section .text.exit:

00000908 <exit>:
 908:	ec 01       	movw	r28, r24
 90a:	36 d0       	rcall	.+108    	; 0x978 <__funcs_on_exit>
 90c:	34 d0       	rcall	.+104    	; 0x976 <_fini>
 90e:	ce 01       	movw	r24, r28
 910:	34 d0       	rcall	.+104    	; 0x97a <__simulator_exit>
 912:	ce 01       	movw	r24, r28
 914:	33 d0       	rcall	.+102    	; 0x97c <_Exit>

Disassembly of section .text._Exit:

0000097c <_Exit>:
 97c:	80 db       	rcall	.-2304   	; 0x7e <_exit>
