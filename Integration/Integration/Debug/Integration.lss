
Integration.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000003a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000144  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000173  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000181  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000081f  00000000  00000000  000001a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000538  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000226  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001120  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000017a  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  000012be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000134e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000002  000000c6  000000c6  0000013a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001360  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    0000007e  0000003a  0000003a  000000ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_fini 00000002  000000c8  000000c8  0000013c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_funcs_on_exit 00000002  000000ca  000000ca  0000013e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_simulator_exit 00000002  000000cc  000000cc  00000140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.exit    0000000e  000000b8  000000b8  0000012c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text._Exit   00000002  000000ce  000000ce  00000142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	61 c0       	rjmp	.+194    	; 0xc6 <__bad_interrupt>
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	5f c0       	rjmp	.+190    	; 0xc6 <__bad_interrupt>
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	5d c0       	rjmp	.+186    	; 0xc6 <__bad_interrupt>
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	5b c0       	rjmp	.+182    	; 0xc6 <__bad_interrupt>
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	59 c0       	rjmp	.+178    	; 0xc6 <__bad_interrupt>
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	57 c0       	rjmp	.+174    	; 0xc6 <__bad_interrupt>
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	55 c0       	rjmp	.+170    	; 0xc6 <__bad_interrupt>
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	53 c0       	rjmp	.+166    	; 0xc6 <__bad_interrupt>
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	51 c0       	rjmp	.+162    	; 0xc6 <__bad_interrupt>
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	03 d0       	rcall	.+6      	; 0x3a <_etext>
  34:	41 c0       	rjmp	.+130    	; 0xb8 <exit>

00000036 <_exit>:
  36:	f8 94       	cli

00000038 <__stop_program>:
  38:	ff cf       	rjmp	.-2      	; 0x38 <__stop_program>

Disassembly of section .text:

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

0000003a <main>:
#include <avr/io.h>
#include <util/delay.h>


int main(void) {
	DDRD &= ~(1 << PD6); // PD6 as input (SWITCH 4)
  3a:	81 b3       	in	r24, 0x11	; 17
  3c:	8f 7b       	andi	r24, 0xBF	; 191
  3e:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1 << PD7); // PD7 as input (SWITCH 5)
  40:	81 b3       	in	r24, 0x11	; 17
  42:	8f 77       	andi	r24, 0x7F	; 127
  44:	81 bb       	out	0x11, r24	; 17
	

	DDRD |= (1 << PD5); // PD5 as output
  46:	81 b3       	in	r24, 0x11	; 17
  48:	80 62       	ori	r24, 0x20	; 32
  4a:	81 bb       	out	0x11, r24	; 17
	
	
	while (1) {
		// Check the values of PD6 and PD7 to determine the mode
		if (!(PIND & (1 << PD6)) && !(PIND & (1 << PD7))) {
  4c:	86 99       	sbic	0x10, 6	; 16
  4e:	10 c0       	rjmp	.+32     	; 0x70 <__SREG__+0x31>
  50:	87 99       	sbic	0x10, 7	; 16
  52:	0e c0       	rjmp	.+28     	; 0x70 <__SREG__+0x31>
			
			// Mode 00: Data Acquisition
			PORTD ^= (1 << PD5); // Toggle the LED state
  54:	92 b3       	in	r25, 0x12	; 18
  56:	80 e2       	ldi	r24, 0x20	; 32
  58:	89 27       	eor	r24, r25
  5a:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5c:	2f e7       	ldi	r18, 0x7F	; 127
  5e:	88 e3       	ldi	r24, 0x38	; 56
  60:	91 e0       	ldi	r25, 0x01	; 1
  62:	21 50       	subi	r18, 0x01	; 1
  64:	80 40       	sbci	r24, 0x00	; 0
  66:	90 40       	sbci	r25, 0x00	; 0
  68:	e1 f7       	brne	.-8      	; 0x62 <__SREG__+0x23>
  6a:	00 c0       	rjmp	.+0      	; 0x6c <__SREG__+0x2d>
  6c:	00 00       	nop
  6e:	ee cf       	rjmp	.-36     	; 0x4c <__SREG__+0xd>
			_delay_ms(50);     // Delay for half a second
			
			} 
			
			else if (!(PIND & (1 << PD6)) && (PIND & (1 << PD7))) {
  70:	86 99       	sbic	0x10, 6	; 16
  72:	10 c0       	rjmp	.+32     	; 0x94 <__SREG__+0x55>
  74:	87 9b       	sbis	0x10, 7	; 16
  76:	0e c0       	rjmp	.+28     	; 0x94 <__SREG__+0x55>
				
			// Mode 01: Control
			PORTD ^= (1 << PD5); // Toggle the LED state
  78:	92 b3       	in	r25, 0x12	; 18
  7a:	80 e2       	ldi	r24, 0x20	; 32
  7c:	89 27       	eor	r24, r25
  7e:	82 bb       	out	0x12, r24	; 18
  80:	2f ef       	ldi	r18, 0xFF	; 255
  82:	84 e3       	ldi	r24, 0x34	; 52
  84:	9c e0       	ldi	r25, 0x0C	; 12
  86:	21 50       	subi	r18, 0x01	; 1
  88:	80 40       	sbci	r24, 0x00	; 0
  8a:	90 40       	sbci	r25, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <__SREG__+0x47>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <__SREG__+0x51>
  90:	00 00       	nop
  92:	dc cf       	rjmp	.-72     	; 0x4c <__SREG__+0xd>
			_delay_ms(500);     // Delay for half a second
			
			}
			
			 else if ((PIND & (1 << PD6)) && !(PIND & (1 << PD7))) {
  94:	86 9b       	sbis	0x10, 6	; 16
  96:	da cf       	rjmp	.-76     	; 0x4c <__SREG__+0xd>
  98:	87 99       	sbic	0x10, 7	; 16
  9a:	d8 cf       	rjmp	.-80     	; 0x4c <__SREG__+0xd>
				 
			// Mode 10: Idle
			PORTD ^= (1 << PD5); // Toggle the LED state
  9c:	92 b3       	in	r25, 0x12	; 18
  9e:	80 e2       	ldi	r24, 0x20	; 32
  a0:	89 27       	eor	r24, r25
  a2:	82 bb       	out	0x12, r24	; 18
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	89 e6       	ldi	r24, 0x69	; 105
  a8:	98 e1       	ldi	r25, 0x18	; 24
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <__SREG__+0x6b>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <__SREG__+0x75>
  b4:	00 00       	nop
  b6:	ca cf       	rjmp	.-108    	; 0x4c <__SREG__+0xd>

Disassembly of section .text.__dummy_fini:

000000c8 <_fini>:
  c8:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000ca <__funcs_on_exit>:
  ca:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000cc <__simulator_exit>:
  cc:	08 95       	ret

Disassembly of section .text.exit:

000000b8 <exit>:
  b8:	ec 01       	movw	r28, r24
  ba:	07 d0       	rcall	.+14     	; 0xca <__funcs_on_exit>
  bc:	05 d0       	rcall	.+10     	; 0xc8 <_fini>
  be:	ce 01       	movw	r24, r28
  c0:	05 d0       	rcall	.+10     	; 0xcc <__simulator_exit>
  c2:	ce 01       	movw	r24, r28
  c4:	04 d0       	rcall	.+8      	; 0xce <_Exit>

Disassembly of section .text._Exit:

000000ce <_Exit>:
  ce:	b3 df       	rcall	.-154    	; 0x36 <_exit>
