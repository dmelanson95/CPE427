
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000056  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000051f  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004a4  00000000  00000000  00000657  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001c3  00000000  00000000  00000afb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002b8  00000000  00000000  00000ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	0e c0       	rjmp	.+28     	; 0x52 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#define duty_cycle75 191
//

int main(void){
	
	DDRB = (1<<DDB1);			//  1. Set PB1 to Output
  38:	82 e0       	ldi	r24, 0x02	; 2
  3a:	87 bb       	out	0x17, r24	; 23

	TCCR1A  = (1 << WGM10);		//  2. Set Phase Correct PWM Mode 8bit
  3c:	91 e0       	ldi	r25, 0x01	; 1
  3e:	9f bd       	out	0x2f, r25	; 47
	TCCR1A |= (1 << COM1A1);	//  3. Set None-Inverting Mode
  40:	8f b5       	in	r24, 0x2f	; 47
  42:	80 68       	ori	r24, 0x80	; 128
  44:	8f bd       	out	0x2f, r24	; 47
	TCCR1B  = (1 << CS10);		//  4. (No) Pre-Scaler
  46:	9e bd       	out	0x2e, r25	; 46

	OCR1A = 256;
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	91 e0       	ldi	r25, 0x01	; 1
  4c:	9b bd       	out	0x2b, r25	; 43
  4e:	8a bd       	out	0x2a, r24	; 42
  50:	ff cf       	rjmp	.-2      	; 0x50 <__SREG__+0x11>

00000052 <_exit>:
  52:	f8 94       	cli

00000054 <__stop_program>:
  54:	ff cf       	rjmp	.-2      	; 0x54 <__stop_program>
