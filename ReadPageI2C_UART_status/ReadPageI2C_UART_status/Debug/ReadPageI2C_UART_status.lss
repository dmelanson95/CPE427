
ReadPageI2C_UART_status.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000001c0  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00800072  00800072  00000266  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a62  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000717  00000000  00000000  00000de6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000535  00000000  00000000  000014fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00001a34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000402  00000000  00000000  00001b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000246  00000000  00000000  00001f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000021c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ec       	ldi	r30, 0xC0	; 192
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 37       	cpi	r26, 0x72	; 114
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e7       	ldi	r26, 0x72	; 114
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 3b       	cpi	r26, 0xB2	; 178
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	66 d0       	rcall	.+204    	; 0x126 <main>
  5a:	b0 c0       	rjmp	.+352    	; 0x1bc <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <i2c_init>:

#include "EEPROMdev.h"

void i2c_init(void)
{
  TWSR=0x00;			
  5e:	11 b8       	out	0x01, r1	; 1
  TWBR=0x47;			
  60:	87 e4       	ldi	r24, 0x47	; 71
  62:	80 b9       	out	0x00, r24	; 0
  TWCR=0x04;		
  64:	84 e0       	ldi	r24, 0x04	; 4
  66:	86 bf       	out	0x36, r24	; 54
  68:	08 95       	ret

0000006a <i2c_start>:
}

void i2c_start(void)
{
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
  6a:	84 ea       	ldi	r24, 0xA4	; 164
  6c:	86 bf       	out	0x36, r24	; 54
  while ((TWCR & (1 << TWINT)) == 0);
  6e:	06 b6       	in	r0, 0x36	; 54
  70:	07 fe       	sbrs	r0, 7
  72:	fd cf       	rjmp	.-6      	; 0x6e <i2c_start+0x4>
}
  74:	08 95       	ret

00000076 <i2c_write>:

void i2c_write(unsigned char data)
{
  TWDR = data ;
  76:	83 b9       	out	0x03, r24	; 3
  TWCR = (1<< TWINT)|(1<<TWEN);
  78:	84 e8       	ldi	r24, 0x84	; 132
  7a:	86 bf       	out	0x36, r24	; 54
  while ((TWCR & (1 <<TWINT)) == 0);
  7c:	06 b6       	in	r0, 0x36	; 54
  7e:	07 fe       	sbrs	r0, 7
  80:	fd cf       	rjmp	.-6      	; 0x7c <i2c_write+0x6>
}
  82:	08 95       	ret

00000084 <i2c_read>:

unsigned char i2c_read(unsigned char isLast)
{
  if (isLast == 0)		
  84:	81 11       	cpse	r24, r1
  86:	03 c0       	rjmp	.+6      	; 0x8e <i2c_read+0xa>
    TWCR = (1<< TWINT)|(1<<TWEN)|(1<<TWEA);   // if want to read more than 1 byte
  88:	84 ec       	ldi	r24, 0xC4	; 196
  8a:	86 bf       	out	0x36, r24	; 54
  8c:	02 c0       	rjmp	.+4      	; 0x92 <i2c_read+0xe>
  else				
    TWCR = (1<< TWINT)|(1<<TWEN);   // if want to read only 1 byte
  8e:	84 e8       	ldi	r24, 0x84	; 132
  90:	86 bf       	out	0x36, r24	; 54
  while ((TWCR & (1 <<TWINT)) == 0);
  92:	06 b6       	in	r0, 0x36	; 54
  94:	07 fe       	sbrs	r0, 7
  96:	fd cf       	rjmp	.-6      	; 0x92 <i2c_read+0xe>
  return TWDR  ;
  98:	83 b1       	in	r24, 0x03	; 3
}
  9a:	08 95       	ret

0000009c <i2c_readStatus>:

unsigned char i2c_readStatus(void){
	return (TWSR & 0xF8);
  9c:	81 b1       	in	r24, 0x01	; 1
}
  9e:	88 7f       	andi	r24, 0xF8	; 248
  a0:	08 95       	ret

000000a2 <i2c_stop>:

void i2c_stop()
{
  TWCR = (1<< TWINT)|(1<<TWEN)|(1<<TWSTO);
  a2:	84 e9       	ldi	r24, 0x94	; 148
  a4:	86 bf       	out	0x36, r24	; 54
  a6:	08 95       	ret

000000a8 <TWI_Read_Page>:
#define EEPROM1_RD 0b10100011	// read EEPROM 1 SLA_R address, lsb = 1 for read

unsigned char buffer[64];


unsigned char TWI_Read_Page(unsigned int addr) {
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	c8 2f       	mov	r28, r24
	
	unsigned char i = 0 ;
	
	i2c_start();
  b0:	dc df       	rcall	.-72     	; 0x6a <i2c_start>
	while(i2c_readStatus()!= 0x08);
  b2:	f4 df       	rcall	.-24     	; 0x9c <i2c_readStatus>
  b4:	88 30       	cpi	r24, 0x08	; 8
  b6:	e9 f7       	brne	.-6      	; 0xb2 <TWI_Read_Page+0xa>

	i2c_write(EEPROM1_WR);   // Slave address EEPROM 1, Write
  b8:	82 ea       	ldi	r24, 0xA2	; 162
  ba:	dd df       	rcall	.-70     	; 0x76 <i2c_write>
	while(i2c_readStatus()!= 0x18);
  bc:	ef df       	rcall	.-34     	; 0x9c <i2c_readStatus>
  be:	88 31       	cpi	r24, 0x18	; 24
  c0:	e9 f7       	brne	.-6      	; 0xbc <TWI_Read_Page+0x14>
	
	i2c_write((unsigned char)(addr) >> 8);   // Send high-byte of memory address
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	d8 df       	rcall	.-80     	; 0x76 <i2c_write>
	while(i2c_readStatus()!= 0x28);
  c6:	ea df       	rcall	.-44     	; 0x9c <i2c_readStatus>
  c8:	88 32       	cpi	r24, 0x28	; 40
  ca:	e9 f7       	brne	.-6      	; 0xc6 <TWI_Read_Page+0x1e>
	
	i2c_write((unsigned char)(addr));        // Send low-byte of memory address
  cc:	8c 2f       	mov	r24, r28
  ce:	d3 df       	rcall	.-90     	; 0x76 <i2c_write>
	while(i2c_readStatus()!= 0x28);
  d0:	e5 df       	rcall	.-54     	; 0x9c <i2c_readStatus>
  d2:	88 32       	cpi	r24, 0x28	; 40
  d4:	e9 f7       	brne	.-6      	; 0xd0 <TWI_Read_Page+0x28>
	
	i2c_start();   // send a Re-start condition
  d6:	c9 df       	rcall	.-110    	; 0x6a <i2c_start>
	while(i2c_readStatus()!= 0x10);
  d8:	e1 df       	rcall	.-62     	; 0x9c <i2c_readStatus>
  da:	80 31       	cpi	r24, 0x10	; 16
  dc:	e9 f7       	brne	.-6      	; 0xd8 <TWI_Read_Page+0x30>

	i2c_write(EEPROM1_RD);   // Slave address EEPROM 1, Read
  de:	83 ea       	ldi	r24, 0xA3	; 163
  e0:	ca df       	rcall	.-108    	; 0x76 <i2c_write>
	while(i2c_readStatus()!= 0x40);
  e2:	dc df       	rcall	.-72     	; 0x9c <i2c_readStatus>
  e4:	80 34       	cpi	r24, 0x40	; 64
  e6:	e9 f7       	brne	.-6      	; 0xe2 <TWI_Read_Page+0x3a>
  e8:	10 e0       	ldi	r17, 0x00	; 0
  ea:	0b c0       	rjmp	.+22     	; 0x102 <TWI_Read_Page+0x5a>
	
	
	// Read the first 63 bytes while sending ACK.
	for (i=0; i<63; ++i) {
		buffer[i] = i2c_read(0);
  ec:	c1 2f       	mov	r28, r17
  ee:	d0 e0       	ldi	r29, 0x00	; 0
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	c8 df       	rcall	.-112    	; 0x84 <i2c_read>
  f4:	ce 58       	subi	r28, 0x8E	; 142
  f6:	df 4f       	sbci	r29, 0xFF	; 255
  f8:	88 83       	st	Y, r24
		while(i2c_readStatus()!= 0x50);
  fa:	d0 df       	rcall	.-96     	; 0x9c <i2c_readStatus>
  fc:	80 35       	cpi	r24, 0x50	; 80
  fe:	e9 f7       	brne	.-6      	; 0xfa <TWI_Read_Page+0x52>
	i2c_write(EEPROM1_RD);   // Slave address EEPROM 1, Read
	while(i2c_readStatus()!= 0x40);
	
	
	// Read the first 63 bytes while sending ACK.
	for (i=0; i<63; ++i) {
 100:	1f 5f       	subi	r17, 0xFF	; 255
 102:	1f 33       	cpi	r17, 0x3F	; 63
 104:	98 f3       	brcs	.-26     	; 0xec <TWI_Read_Page+0x44>
		buffer[i] = i2c_read(0);
		while(i2c_readStatus()!= 0x50);

	}
	// Read the last byte (byte 64) and send a NACK (i.e. don't send an ACK).
	buffer[i] = i2c_read(1);
 106:	c1 2f       	mov	r28, r17
 108:	d0 e0       	ldi	r29, 0x00	; 0
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	bb df       	rcall	.-138    	; 0x84 <i2c_read>
 10e:	ce 58       	subi	r28, 0x8E	; 142
 110:	df 4f       	sbci	r29, 0xFF	; 255
 112:	88 83       	st	Y, r24
	while(i2c_readStatus()!= 0x58);
 114:	c3 df       	rcall	.-122    	; 0x9c <i2c_readStatus>
 116:	88 35       	cpi	r24, 0x58	; 88
 118:	e9 f7       	brne	.-6      	; 0x114 <TWI_Read_Page+0x6c>
	
	i2c_stop();	
 11a:	c3 df       	rcall	.-122    	; 0xa2 <i2c_stop>

	return 0;
}
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	08 95       	ret

00000126 <main>:



int main(void)
{
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	00 d0       	rcall	.+0      	; 0x12e <main+0x8>
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
	unsigned char i;
	unsigned char C1, C2;
	unsigned int startingAddress = 0x00;

	USART_init(MyBaud);
 132:	83 e3       	ldi	r24, 0x33	; 51
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	25 d0       	rcall	.+74     	; 0x182 <USART_init>
	i2c_init();	
 138:	92 df       	rcall	.-220    	; 0x5e <i2c_init>
	
	TWI_Read_Page(startingAddress);	
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	b4 df       	rcall	.-152    	; 0xa8 <TWI_Read_Page>
	
	// Send read bytes to serial port UART as ASCII.
	for (i=0; i<64; ++i) {
 140:	10 e0       	ldi	r17, 0x00	; 0
 142:	15 c0       	rjmp	.+42     	; 0x16e <main+0x48>
		hex2ascii(buffer[i], &C1, &C2);
 144:	e1 2f       	mov	r30, r17
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	ee 58       	subi	r30, 0x8E	; 142
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	ae 01       	movw	r20, r28
 14e:	4e 5f       	subi	r20, 0xFE	; 254
 150:	5f 4f       	sbci	r21, 0xFF	; 255
 152:	be 01       	movw	r22, r28
 154:	6f 5f       	subi	r22, 0xFF	; 255
 156:	7f 4f       	sbci	r23, 0xFF	; 255
 158:	80 81       	ld	r24, Z
 15a:	1e d0       	rcall	.+60     	; 0x198 <hex2ascii>
		USART_Transmit(C1);
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	18 d0       	rcall	.+48     	; 0x190 <USART_Transmit>
		USART_Transmit(C2);
 160:	8a 81       	ldd	r24, Y+2	; 0x02
 162:	16 d0       	rcall	.+44     	; 0x190 <USART_Transmit>
		//USART_Transmit('\t');
		USART_Transmit('\n');    // Echo back a new line
 164:	8a e0       	ldi	r24, 0x0A	; 10
 166:	14 d0       	rcall	.+40     	; 0x190 <USART_Transmit>
		USART_Transmit('\r');    // Echo back a carriage return to go to beginning of new line
 168:	8d e0       	ldi	r24, 0x0D	; 13
 16a:	12 d0       	rcall	.+36     	; 0x190 <USART_Transmit>
	i2c_init();	
	
	TWI_Read_Page(startingAddress);	
	
	// Send read bytes to serial port UART as ASCII.
	for (i=0; i<64; ++i) {
 16c:	1f 5f       	subi	r17, 0xFF	; 255
 16e:	10 34       	cpi	r17, 0x40	; 64
 170:	48 f3       	brcs	.-46     	; 0x144 <main+0x1e>
		USART_Transmit(C2);
		//USART_Transmit('\t');
		USART_Transmit('\n');    // Echo back a new line
		USART_Transmit('\r');    // Echo back a carriage return to go to beginning of new line
	}
}
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0f 90       	pop	r0
 178:	0f 90       	pop	r0
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	08 95       	ret

00000182 <USART_init>:
	int k = 0;
	while (msg[k] !=0) {
		USART_Transmit(msg[k]);
		k = k + 1;
	}
}
 182:	90 bd       	out	0x20, r25	; 32
 184:	89 b9       	out	0x09, r24	; 9
 186:	88 e1       	ldi	r24, 0x18	; 24
 188:	8a b9       	out	0x0a, r24	; 10
 18a:	86 e8       	ldi	r24, 0x86	; 134
 18c:	80 bd       	out	0x20, r24	; 32
 18e:	08 95       	ret

00000190 <USART_Transmit>:
 190:	5d 9b       	sbis	0x0b, 5	; 11
 192:	fe cf       	rjmp	.-4      	; 0x190 <USART_Transmit>
 194:	8c b9       	out	0x0c, r24	; 12
 196:	08 95       	ret

00000198 <hex2ascii>:

void hex2ascii(UC inc, UC *c1, UC *c2){
	(*c1)=asctab[(inc>>4)&0x0f];
 198:	e8 2f       	mov	r30, r24
 19a:	e2 95       	swap	r30
 19c:	ef 70       	andi	r30, 0x0F	; 15
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	e0 5a       	subi	r30, 0xA0	; 160
 1a2:	ff 4f       	sbci	r31, 0xFF	; 255
 1a4:	90 81       	ld	r25, Z
 1a6:	fb 01       	movw	r30, r22
 1a8:	90 83       	st	Z, r25
	(*c2)=asctab[inc& 0x0f];
 1aa:	8f 70       	andi	r24, 0x0F	; 15
 1ac:	e8 2f       	mov	r30, r24
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	e0 5a       	subi	r30, 0xA0	; 160
 1b2:	ff 4f       	sbci	r31, 0xFF	; 255
 1b4:	80 81       	ld	r24, Z
 1b6:	fa 01       	movw	r30, r20
 1b8:	80 83       	st	Z, r24
 1ba:	08 95       	ret

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
